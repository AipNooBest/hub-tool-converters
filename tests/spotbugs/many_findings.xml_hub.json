{
    "version": "1.0.1",
    "scans": [
        {
            "scanDetails": {
                "id": "a5b590ba-ee0e-4437-a4e0-72caee88b5f7",
                "description": "Import spotbugs results"
            },
            "source": [
                {
                    "id": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                    "type": "codebase",
                    "name": "hub-tool-converters",
                    "url": "https://github.com/Swordfish-Security/hub-tool-converters.git",
                    "checkoutPath": "/",
                    "branch": "master",
                    "commit": "master",
                    "vcsType": "git"
                }
            ],
            "tool": {
                "product": "spotbugs"
            },
            "results": [
                {
                    "rules": [
                        {
                            "type": "sast",
                            "name": "spotbugs Medium",
                            "id": "spotbugs Medium",
                            "severity": "Medium",
                            "cwe": [
                                {
                                    "id": 78
                                },
                                {
                                    "id": 117
                                },
                                {
                                    "id": 259
                                },
                                {
                                    "id": 22
                                }
                            ],
                            "description": "Injection"
                        },
                        {
                            "type": "sast",
                            "name": "spotbugs Low",
                            "id": "spotbugs Low",
                            "severity": "Low",
                            "cwe": [
                                {
                                    "id": 117
                                }
                            ],
                            "description": "parameter"
                        }
                    ],
                    "locations": [
                        {
                            "type": "codebase",
                            "id": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "sourceId": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                            "fileName": "securitytest/command/IdentityFunctionCommandInjection.kt",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "40a351dacf6a1c648bd61f429e192d0d",
                            "sourceId": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                            "fileName": "securitytest/command/StringManipulationCommandInjection.kt",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "37c42f3607b15d600cea11f0a33a7215",
                            "sourceId": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                            "fileName": "securitytest/injection/KotlinLogging.kt",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "af606ad64c3a876c3d725d7ad8b9f3c9",
                            "sourceId": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                            "fileName": "securitytest/injection/KotlinSSRFController.kt",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "0b18cd0986edf33bb2dacc946445dd72",
                            "sourceId": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                            "fileName": "securitytest/injection/KotlinSlf4jSample.kt",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "3253498ada9fdd158121350c43337738",
                            "sourceId": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                            "fileName": "securitytest/password/HardCode2.kt",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "c139d7bd764de966fd5dd6afac210efb",
                            "sourceId": "037a4b19-dfc5-47eb-bb20-3672e68caa3c",
                            "fileName": "securitytest/pathtraversal/PathTraversalKotlin.kt",
                            "language": "Any"
                        }
                    ],
                    "findings": [
                        {
                            "type": "sast",
                            "id": "5de230bf9be38c91f3826aba77777bf8",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 95,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection</p>\n<p>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</p>\n<p>At IdentityFunctionCommandInjection.kt:[lines 20-170]</p>\n<p>In class securitytest.command.IdentityFunctionCommandInjection</p>\n<p>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after also does nothing(String)</p>\n<p>At IdentityFunctionCommandInjection.kt:[line 95]</p>\n<p>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</p>\n<p>Sink parameter 0</p>\n<p>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after also does nothing(Ljava/lang/String;)V parameter 0</p>\n<p>Method usage not detected</p>\n<p>In IdentityFunctionCommandInjection.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "ab58110660351cb6f01e87ffa2953ddc",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 31,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after always false not filter(String)\nAt IdentityFunctionCommandInjection.kt:[line 31]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/CharSequence.charAt(I)C\nUnknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;\nAt IdentityFunctionCommandInjection.kt:[line 29]\nAt IdentityFunctionCommandInjection.kt:[line 105]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "9f5e5e106732b0a6856cc6e2461e2cdd",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 25,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after always true filter(String)\nAt IdentityFunctionCommandInjection.kt:[line 25]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/CharSequence.charAt(I)C\nUnknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;\nAt IdentityFunctionCommandInjection.kt:[line 23]\nAt IdentityFunctionCommandInjection.kt:[line 99]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "3e4aaf32f42319ea3e3f7e42009b722e",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 59,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after drop last while always false(String)\nAt IdentityFunctionCommandInjection.kt:[line 59]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after drop last while always false(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt\nAt IdentityFunctionCommandInjection.kt:[line 121]\nAt IdentityFunctionCommandInjection.kt:[line 123]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "68cc8ed962a287cf481bb262d79dafcc",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 53,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after drop while always false(String)\nAt IdentityFunctionCommandInjection.kt:[line 53]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after drop while always false(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt\nAt IdentityFunctionCommandInjection.kt:[line 119]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "99e0aa90933b7ee699f8b7f479c99caf",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 47,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after identity function with apply(String)\nAt IdentityFunctionCommandInjection.kt:[line 47]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with apply(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "ebf93e3db7c678c9355888c3fae21769",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 43,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after identity function with let(String)\nAt IdentityFunctionCommandInjection.kt:[line 43]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with let(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "7c868889272be04e21d66be3769fa2a6",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 37,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after identity function with run(String)\nAt IdentityFunctionCommandInjection.kt:[line 37]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with run(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "9c693e99937850fd9fb3887820dfe71c",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 71,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after take last while always true then reversed(String)\nAt IdentityFunctionCommandInjection.kt:[line 71]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nAt IdentityFunctionCommandInjection.kt:[line 69]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "50078991e76c7f3f37826ed22e0f21ff",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 65,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after take while always true(String)\nAt IdentityFunctionCommandInjection.kt:[line 65]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after take while always true(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt\nAt IdentityFunctionCommandInjection.kt:[line 127]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "aef18120884b8700ae639ce200696a27",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 77,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after trim always false(String)\nAt IdentityFunctionCommandInjection.kt:[line 77]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nUnknown source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim always false(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt\nAt IdentityFunctionCommandInjection.kt:[line 136]\nAt IdentityFunctionCommandInjection.kt:[line 158]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "9ccf5b66a52459d6e5ae1da9860ab27f",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 83,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after trim end always false(String)\nAt IdentityFunctionCommandInjection.kt:[line 83]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nUnknown source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim end always false(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt\nAt IdentityFunctionCommandInjection.kt:[line 159]\nAt IdentityFunctionCommandInjection.kt:[line 162]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "a16a69e86a2c9451d4879c07dd9deb3e",
                            "ruleId": "spotbugs Medium",
                            "locationId": "89a1d752e22ba7ff7d32db2fe0e67b74",
                            "line": 89,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt IdentityFunctionCommandInjection.kt:[lines 20-170]\nIn class securitytest.command.IdentityFunctionCommandInjection\nIn method securitytest.command.IdentityFunctionCommandInjection.tained input executed after trim start always false(String)\nAt IdentityFunctionCommandInjection.kt:[line 89]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nUnknown source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;\nUnknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim start always false(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn IdentityFunctionCommandInjection.kt\nAt IdentityFunctionCommandInjection.kt:[line 165]\nAt IdentityFunctionCommandInjection.kt:[line 168]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "214c61c82112d50f36a5862f424ffe09",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 31,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after (de)capitalisation(String)\nAt StringManipulationCommandInjection.kt:[line 31]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "b177d5ab26d2ce5b9658556cad2bdd64",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 25,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after applying suffix with plus(String)\nAt StringManipulationCommandInjection.kt:[line 25]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/StringManipulationCommandInjection.tained input executed after applying suffix with plus(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn StringManipulationCommandInjection.kt\nAt StringManipulationCommandInjection.kt:[line 23]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "f6fe495b831be370a05f4425c816e6c7",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 55,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after end padding(String)\nAt StringManipulationCommandInjection.kt:[line 55]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "a88e5ab6bcd9c64abdc9489948bb3841",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 163,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after end truncation(String)\nAt StringManipulationCommandInjection.kt:[line 163]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "2d43412d2cec8a7c36cd7d55f91c1a73",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 37,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after first characters removed(String)\nAt StringManipulationCommandInjection.kt:[line 37]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "c6ce21f09142d2fbb6f5d915c42acffe",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 49,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after front padding(String)\nAt StringManipulationCommandInjection.kt:[line 49]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "16c034e7560cf62f79548e6a55713bd3",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 157,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after front truncation(String)\nAt StringManipulationCommandInjection.kt:[line 157]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "30caa5f7f9df4804a7c306277fc5a02f",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 61,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after indentation(String)\nAt StringManipulationCommandInjection.kt:[line 61]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "ff2de573e173a0800e71feed54eb8258",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 43,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after last characters removed(String)\nAt StringManipulationCommandInjection.kt:[line 43]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "00830a04b1602fff9cf4c3350f30907c",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 67,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after remove prefix(String)\nAt StringManipulationCommandInjection.kt:[line 67]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "bc321587b5a5a6ce6fbc506ac9305266",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 73,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after remove range(String)\nAt StringManipulationCommandInjection.kt:[line 73]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nAt StringManipulationCommandInjection.kt:[line 71]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "a1ca68e26d749ed71962e25d42073dda",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 79,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after remove suffix(String)\nAt StringManipulationCommandInjection.kt:[line 79]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "72e2342ccc94d0aaa40b9103027f787d",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 85,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after remove surrounding(String)\nAt StringManipulationCommandInjection.kt:[line 85]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "2398c7dbd963db4e19d0ba468d8389b8",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 103,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after replace after(String)\nAt StringManipulationCommandInjection.kt:[line 103]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "aa52b045fe1f30c3029671155a4cfe56",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 109,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after replace after last(String)\nAt StringManipulationCommandInjection.kt:[line 109]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "066b646994bdcd2e3c3a7b57cd87d958",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 115,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after replace before(String)\nAt StringManipulationCommandInjection.kt:[line 115]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "72637b053a6d74b6ca62e1b280b84a4a",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 121,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after replace before last(String)\nAt StringManipulationCommandInjection.kt:[line 121]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "590bc3758d7d26157e15d814304ade66",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 97,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after replace first(String)\nAt StringManipulationCommandInjection.kt:[line 97]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "7047574b4f05a829210f7c696e0c0ecf",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 91,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after replacement(String)\nAt StringManipulationCommandInjection.kt:[line 91]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source securitytest/command/StringManipulationCommandInjection.tained input executed after replacement(Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn StringManipulationCommandInjection.kt\nAt StringManipulationCommandInjection.kt:[line 89]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "645b0f51a70c71b81e5fba5202d12105",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 127,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after reversal(String)\nAt StringManipulationCommandInjection.kt:[line 127]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nAt StringManipulationCommandInjection.kt:[line 125]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "8538a59e4dd93d4e9c7f4cda4a1521e3",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 133,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming(String)\nAt StringManipulationCommandInjection.kt:[line 133]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nAt StringManipulationCommandInjection.kt:[line 131]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "3aa3fc2697cffa74bef0f10d99872b7b",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 151,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming end(String)\nAt StringManipulationCommandInjection.kt:[line 151]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nAt StringManipulationCommandInjection.kt:[line 149]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "75937ca800b93ea472fc42974448a57f",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 139,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming indent(String)\nAt StringManipulationCommandInjection.kt:[line 139]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "f5dda9c9d87f1158e65e34be72af43f7",
                            "ruleId": "spotbugs Medium",
                            "locationId": "40a351dacf6a1c648bd61f429e192d0d",
                            "line": 145,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Command Injection\nThis usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection\nAt StringManipulationCommandInjection.kt:[lines 20-164]\nIn class securitytest.command.StringManipulationCommandInjection\nIn method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming start(String)\nAt StringManipulationCommandInjection.kt:[line 145]\nSink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;\nSink parameter 0\nUnknown source java/lang/Object.toString()Ljava/lang/String;\nAt StringManipulationCommandInjection.kt:[line 143]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "8a646cf652f3482e32e403ef816469e7",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 20,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.config(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 20]\nSink method java/util/logging/Logger.config(Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "5a71e485014ec1f0c454853e4ff61c11",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 21,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 21]\nSink method java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;)V\nSink parameter 1\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "376eb2fcf5eedcf4ae503485e8b7c049",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 22,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 22]\nSink method java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "8ce825a7a8fbe655472c95b8dea34e1b",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 23,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 23]\nSink method java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "6c65163e964176fb0b46fed53c019859",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 24,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 24]\nSink method java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "46fda4844c1ac6108ddfbb2aadd4011c",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 25,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 25]\nSink method java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "e653c054523fd4aeef29cab2d1a23f79",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 26,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.fine(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 26]\nSink method java/util/logging/Logger.fine(Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "0a66255406ca73353712f2a90b039355",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 27,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.finer(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 27]\nSink method java/util/logging/Logger.finer(Ljava/lang/String;)V\nSink parameter 0\nTainted source java/lang/Object.toString()Ljava/lang/String;\nTainted source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 68]\nAt KotlinLogging.kt:[line 90]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "7cf9440dcef5a65b7af8c82af8d10ee1",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 28,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.finest(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 28]\nSink method java/util/logging/Logger.finest(Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "4b523e56753ad14a537e34d46ae0952d",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 29,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.info(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 29]\nSink method java/util/logging/Logger.info(Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "8c4bc3f1424065b50108a7b6c9f4fc2e",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 30,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 30]\nSink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "7f1548811b9adf95f7a8aa631f5a1b6b",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 31,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 31]\nSink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 1\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "4caa66e6ba21e618895fa5b45ee2a3b9",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 32,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 32]\nSink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "e155f1775a80b761dd626597695b732a",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 33,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 33]\nSink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V\nSink parameter 1\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "ebde7219052240e027f2372cdd63d4b8",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 34,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 34]\nSink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\nSink parameter 2\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "123e460576cb3409da6dc750597f9b44",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 35,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 35]\nSink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 1\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "f4486bd4057ee9e56532d75d3cd16057",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 36,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 36]\nSink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "e67ef8cd87df5fa96ecbaf87aa60824e",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 37,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 37]\nSink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V\nSink parameter 3\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "e707c8a5b51908ff3fd57a3ebed0de72",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 38,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Supplier;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 38]\nSink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Supplier;)V\nSink parameter 2\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "318773636cfec1c6a89d440e5597ba5e",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 39,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;Ljava/util/function/Supplier;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 39]\nSink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;Ljava/util/function/Supplier;)V\nSink parameter 2\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "a0e42557868e4f644a11408d78a5b4dd",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 40,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 40]\nSink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;[Ljava/lang/Object;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "031f3d005612093101c94a8487b9f75e",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 41,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 41]\nSink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;Ljava/lang/Throwable;)V\nSink parameter 4\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "928c677e4f0ff4cd97662d8bd89c15a1",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 42,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 42]\nSink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\nSink parameter 3\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "2b09633fec9ffdcd455bd901115f8da7",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 43,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 43]\nSink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 3\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "3846b6f3fcedc3f564a01babd8de3a2f",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 44,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 44]\nSink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V\nSink parameter 4\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "b5699ab7390dd7299448823207346aa3",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 45,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 45]\nSink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V\nSink parameter 1\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "1a8f93acf8922a2d65d5dca2bd7641a8",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 46,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.severe(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 46]\nSink method java/util/logging/Logger.severe(Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]\nAt KotlinLogging.kt:[line 46]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "138682c232417042f224d086c16cec28",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 47,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.throwing(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 47]\nSink method java/util/logging/Logger.throwing(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V\nSink parameter 1\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]\nAt KotlinLogging.kt:[line 46]\nAt KotlinLogging.kt:[line 47]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "753e3987e3b5d184e6024e7a6eb20327",
                            "ruleId": "spotbugs Medium",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 48,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of java/util/logging/Logger.warning(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 48]\nSink method java/util/logging/Logger.warning(Ljava/lang/String;)V\nSink parameter 0\nTainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;\nAt KotlinLogging.kt:[line 12]\nAt KotlinLogging.kt:[line 27]\nAt KotlinLogging.kt:[line 46]\nAt KotlinLogging.kt:[line 48]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "0a9d1d9fabb7e22a51cbd9615d3b713a",
                            "ruleId": "spotbugs Low",
                            "locationId": "37c42f3607b15d600cea11f0a33a7215",
                            "line": 12,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Untrusted servlet parameter\nThe method getParameter returns a String value that is controlled by the client\nAt KotlinLogging.kt:[lines 8-90]\nIn class securitytest.injection.KotlinLogging\nIn method securitytest.injection.KotlinLogging.javaUtilLogging()\nAt KotlinLogging.kt:[line 12]\nValue getParameter</p>"
                        },
                        {
                            "type": "sast",
                            "id": "d95660b9d4eee38e4aef80a16bd86a7b",
                            "ruleId": "spotbugs Low",
                            "locationId": "af606ad64c3a876c3d725d7ad8b9f3c9",
                            "line": 15,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Found Spring endpoint\nsecuritytest.injection.KotlinSSRFController is a Spring endpoint (Controller)\nAt KotlinSSRFController.kt:[lines 11-33]\nIn class securitytest.injection.KotlinSSRFController\nIn method securitytest.injection.KotlinSSRFController.kotlinssrf(String)\nAt KotlinSSRFController.kt:[lines 15-33]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "cb6be0f6779c996a7c0d0946b8fd88b8",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 10,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 10]\nSink method org/slf4j/Logger.info(Ljava/lang/String;)V\nSink parameter 0\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.input\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;\nAt KotlinSlf4jSample.kt:[line 10]\nAt KotlinSlf4jSample.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "df3acd669eedf744f24d3e24f49476d2",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 11,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 11]\nSink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 1\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.input\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;\nAt KotlinSlf4jSample.kt:[line 11]\nAt KotlinSlf4jSample.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "b3bdfd75446f92af638a2af175d10656",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 12,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 12]\nSink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 0\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.input\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;\nAt KotlinSlf4jSample.kt:[line 12]\nAt KotlinSlf4jSample.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "7747bf4ed2a39acaab6d09b32408a76f",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 14,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 14]\nSink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\nSink parameter 0\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.input\nUnknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;\nAt KotlinSlf4jSample.kt:[line 14]\nAt KotlinSlf4jSample.kt:[line 27]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "631aa96cf6e716db5cb91ac16299e3cb",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 15,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 15]\nSink method org/slf4j/Logger.info(Ljava/lang/String;)V\nSink parameter 0\nUnknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn KotlinSlf4jSample.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "5ca4a1e50cd6894c675e3bcd52251a6a",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 16,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 16]\nSink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 1\nUnknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn KotlinSlf4jSample.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "668b52a4cba51b83c3365aa3bf2b8d4e",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 17,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 17]\nSink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V\nSink parameter 0\nUnknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn KotlinSlf4jSample.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "e532cf8bf9410d75b4fd377d67b083b0",
                            "ruleId": "spotbugs Low",
                            "locationId": "0b18cd0986edf33bb2dacc946445dd72",
                            "line": 19,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential CRLF Injection for logs\nThis use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V might be used to include CRLF characters into log messages\nAt KotlinSlf4jSample.kt:[lines 5-24]\nIn class securitytest.injection.KotlinSlf4jSample\nIn method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)\nAt KotlinSlf4jSample.kt:[line 19]\nSink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\nSink parameter 0\nUnknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn KotlinSlf4jSample.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "bb0331c3ee7398ca0eda5dfa3cdce8a0",
                            "ruleId": "spotbugs Medium",
                            "locationId": "3253498ada9fdd158121350c43337738",
                            "line": 35,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Hard coded password\nHard coded password found\nAt HardCode2.kt:[lines 11-54]\nIn class securitytest.password.HardCode2\nIn method securitytest.password.HardCode2.kotlinssrf(String)\nAt HardCode2.kt:[line 35]\nSink method kotlin/jvm/internal/Intrinsics.areEqual(Ljava/lang/Object;Ljava/lang/Object;)Z\nSink parameter 0</p>"
                        },
                        {
                            "type": "sast",
                            "id": "b0440b0df0658ce3aff8abf9fefef277",
                            "ruleId": "spotbugs Medium",
                            "locationId": "c139d7bd764de966fd5dd6afac210efb",
                            "line": 32,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Path Traversal (file read)\nThis API (kotlin/io/FilesKt.createTempDir$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;) reads a file whose location might be specified by user input\nAt PathTraversalKotlin.kt:[lines 25-43]\nIn class securitytest.pathtraversal.PathTraversalKotlin\nIn method securitytest.pathtraversal.PathTraversalKotlin.main(String[])\nAt PathTraversalKotlin.kt:[line 32]\nSink method kotlin/io/FilesKt.createTempDir$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;\nSink parameter 3\nUnknown source securitytest/pathtraversal/PathTraversalKotlin.main([Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn PathTraversalKotlin.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "daad02f6198666f413289566522bc07a",
                            "ruleId": "spotbugs Medium",
                            "locationId": "c139d7bd764de966fd5dd6afac210efb",
                            "line": 33,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Path Traversal (file read)\nThis API (kotlin/io/FilesKt.createTempDir(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input\nAt PathTraversalKotlin.kt:[lines 25-43]\nIn class securitytest.pathtraversal.PathTraversalKotlin\nIn method securitytest.pathtraversal.PathTraversalKotlin.main(String[])\nAt PathTraversalKotlin.kt:[line 33]\nSink method kotlin/io/FilesKt.createTempDir(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;\nSink parameter 0\nUnknown source java/io/File.<init>(Ljava/lang/String;)V\nAt PathTraversalKotlin.kt:[line 33]</p>"
                        },
                        {
                            "type": "sast",
                            "id": "86c24b875701d655030e461cd16674bb",
                            "ruleId": "spotbugs Medium",
                            "locationId": "c139d7bd764de966fd5dd6afac210efb",
                            "line": 35,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Path Traversal (file read)\nThis API (kotlin/io/FilesKt.createTempFile$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;) reads a file whose location might be specified by user input\nAt PathTraversalKotlin.kt:[lines 25-43]\nIn class securitytest.pathtraversal.PathTraversalKotlin\nIn method securitytest.pathtraversal.PathTraversalKotlin.main(String[])\nAt PathTraversalKotlin.kt:[line 35]\nSink method kotlin/io/FilesKt.createTempFile$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;\nSink parameter 3\nUnknown source securitytest/pathtraversal/PathTraversalKotlin.main([Ljava/lang/String;)V parameter 0\nMethod usage not detected\nIn PathTraversalKotlin.kt</p>"
                        },
                        {
                            "type": "sast",
                            "id": "dc8fa4d33d6b3cc38f8d1af8c7d0b8e3",
                            "ruleId": "spotbugs Medium",
                            "locationId": "c139d7bd764de966fd5dd6afac210efb",
                            "line": 36,
                            "code": null,
                            "status": "To Verify",
                            "description": "<p>Potential Path Traversal (file read)\nThis API (kotlin/io/FilesKt.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input\nAt PathTraversalKotlin.kt:[lines 25-43]\nIn class securitytest.pathtraversal.PathTraversalKotlin\nIn method securitytest.pathtraversal.PathTraversalKotlin.main(String[])\nAt PathTraversalKotlin.kt:[line 36]\nSink method kotlin/io/FilesKt.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;\nSink parameter 0\nUnknown source java/io/File.<init>(Ljava/lang/String;)V\nAt PathTraversalKotlin.kt:[line 36]</p>"
                        }
                    ]
                }
            ]
        }
    ],
    "$schema": "https://docs.appsec-hub.ru/"
}