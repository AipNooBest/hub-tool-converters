{
    "version": "1.0.1",
    "scans": [
        {
            "scanDetails": {
                "id": "f4a9b8b0-2979-4704-8ee0-8f6084613cc2",
                "description": "Import checkov results"
            },
            "source": [
                {
                    "id": "61299d21-490d-4470-b9d5-c31257e937b0",
                    "type": "codebase",
                    "name": "hub-tool-converters",
                    "url": "https://github.com/Swordfish-Security/hub-tool-converters.git",
                    "checkoutPath": "/",
                    "branch": "master",
                    "commit": "master",
                    "vcsType": "git"
                }
            ],
            "tool": {
                "product": "checkov"
            },
            "results": [
                {
                    "rules": [
                        {
                            "type": "sast",
                            "name": "checkov Medium",
                            "id": "checkov Medium",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "database"
                        }
                    ],
                    "locations": [
                        {
                            "type": "codebase",
                            "id": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "sourceId": "61299d21-490d-4470-b9d5-c31257e937b0",
                            "fileName": "/aws/db-app.tf",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "d6af67052aa600f74472fb976b381429",
                            "sourceId": "61299d21-490d-4470-b9d5-c31257e937b0",
                            "fileName": "/aws/resources/Dockerfile",
                            "language": "Any"
                        }
                    ],
                    "findings": [
                        {
                            "type": "sast",
                            "id": "d3cc7ffc367548a5f0d94b57f756d195",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 1,
                            "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_161\nEnsure RDS database has IAM authentication enabled</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                                    "line": 1
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "ff38d00998d4ec76cf6f4381e30b6dd7",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 1,
                            "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_16\nEnsure all data stored in the RDS is securely encrypted at rest</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                                    "line": 1
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a16297826acc4d953d540ac01ef5986f",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 1,
                            "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_129\nEnsure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                                    "line": 1
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "f72fa2f3e21b432791a518530896b963",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 1,
                            "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_157\nEnsure that RDS instances have Multi-AZ enabled</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                                    "line": 1
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "b077e11c5e54cfe73aec83d1a14dedde",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 1,
                            "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_17\nEnsure all data stored in RDS is not publicly accessible</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                                    "line": 1
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "e7b57c9fbefe98f14fa524ee0742f184",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 1,
                            "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_118\nEnsure that enhanced monitoring is enabled for Amazon RDS instances</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_db_instance\" \"default\" {\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}\n",
                                    "line": 1
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "93956172e3291a9b006f70dfde4bab72",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 242,
                            "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_79\nEnsure Instance Metadata Service Version 1 is not enabled</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                                    "line": 242
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "17dcc66d9772f9cebb2511d44a3dd730",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 242,
                            "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_8\nEnsure all data stored in the Launch configuration EBS is securely encrypted</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                                    "line": 242
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "211dfb3ddcf684e3a2122bf9358da2b6",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 242,
                            "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_135\nEnsure that EC2 is EBS optimized</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                                    "line": 242
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "12be8d222bc2084c2ddc626ec0479b15",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 242,
                            "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV_AWS_126\nEnsure that detailed monitoring is enabled for EC2 instances</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                                    "line": 242
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "21802711b186a7e3940edbb242dda368",
                            "ruleId": "checkov Medium",
                            "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                            "line": 242,
                            "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: terraform\nCheck Id: CKV2_AWS_17\nEnsure that EC2 instances belong to a VPC</p>",
                            "stacks": [
                                {
                                    "locationId": "e41ca6e77b2fd05f88af42234fe0a9dd",
                                    "sequence": 1,
                                    "code": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}\n",
                                    "line": 242
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "91945710935777bf3d47061a401d1fee",
                            "ruleId": "checkov Medium",
                            "locationId": "d6af67052aa600f74472fb976b381429",
                            "line": 0,
                            "code": "FROM python:3.7-slim\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: dockerfile\nCheck Id: CKV_DOCKER_3\nEnsure that a user for the container has been created</p>",
                            "stacks": [
                                {
                                    "locationId": "d6af67052aa600f74472fb976b381429",
                                    "sequence": 1,
                                    "code": "FROM python:3.7-slim\n",
                                    "line": 0
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a3ef94f0c1b2e93f59d38016e8ca1810",
                            "ruleId": "checkov Medium",
                            "locationId": "d6af67052aa600f74472fb976b381429",
                            "line": 0,
                            "code": "FROM python:3.7-slim\n",
                            "status": "To Verify",
                            "description": "<p>Check Type: dockerfile\nCheck Id: CKV_DOCKER_2\nEnsure that HEALTHCHECK instructions have been added to container images </p>",
                            "stacks": [
                                {
                                    "locationId": "d6af67052aa600f74472fb976b381429",
                                    "sequence": 1,
                                    "code": "FROM python:3.7-slim\n",
                                    "line": 0
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "$schema": "https://docs.appsec-hub.ru/"
}