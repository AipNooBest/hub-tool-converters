{
    "version": "1.0.1",
    "scans": [
        {
            "scanDetails": {
                "id": "da1dd0bf-0417-4a7d-9244-e9b48d2bb49b",
                "description": "Import bandit results"
            },
            "source": [
                {
                    "id": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                    "type": "codebase",
                    "name": "hub-tool-converters",
                    "url": "https://github.com/Swordfish-Security/hub-tool-converters.git",
                    "checkoutPath": "/",
                    "branch": "master",
                    "commit": "master",
                    "vcsType": "git",
                    "buildTool": "maven"
                }
            ],
            "tool": {
                "product": "bandit"
            },
            "results": [
                {
                    "rules": [
                        {
                            "type": "sast",
                            "name": "blacklist:B303",
                            "id": "blacklist:B303",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Use of insecure MD2, MD4, MD5, or SHA1 hash function.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b303-md5"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B410",
                            "id": "blacklist:B410",
                            "severity": "Low",
                            "cwe": null,
                            "description": "Using etree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace etree with the equivalent defusedxml package.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b410-import-lxml"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B320",
                            "id": "blacklist:B320",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-etree"
                        },
                        {
                            "type": "sast",
                            "name": "hardcoded_bind_all_interfaces:B104",
                            "id": "hardcoded_bind_all_interfaces:B104",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Possible binding to all interfaces.\nhttps://bandit.readthedocs.io/en/latest/plugins/b104_hardcoded_bind_all_interfaces.html"
                        },
                        {
                            "type": "sast",
                            "name": "try_except_pass:B110",
                            "id": "try_except_pass:B110",
                            "severity": "Low",
                            "cwe": null,
                            "description": "Try, Except, Pass detected.\nhttps://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B405",
                            "id": "blacklist:B405",
                            "severity": "Low",
                            "cwe": null,
                            "description": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b405-import-xml-etree"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B314",
                            "id": "blacklist:B314",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B310",
                            "id": "blacklist:B310",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen"
                        }
                    ],
                    "locations": [
                        {
                            "type": "codebase",
                            "id": "3c9106dad2e3dafc350ca31acee9bc9d",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/acunetix/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "6161086a58b0d89aa614181096a36001",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/acunetix/parser_helper.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "3790121e0cd63ebaab4be1a1fcec7153",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/blackduck/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "a9141846b7555573b2eb2504d67b49ab",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/bugcrowd/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "55a327221822b1408497557dc26181cf",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/bundler_audit/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "1c1a7e941fb77df05c9cb90b5b30a475",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/ccvs/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "5f29a901208b629641a7fcda30f35d49",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/cobalt/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "89d676c1ef62be5a0a16f0e1db11562e",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/contrast/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "cf7738762dfc0691c7279f5863c0949c",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/dependency_check/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "4c9f0fc8536d4104e3e16228214e11e7",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/generic/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "77e3069c340ef98bdd536378cfe7dfcf",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/gitleaks/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "58e84dd9a81bbb703c0c4f097a5291a5",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/h1/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "dd2c5079aea37e3b531c2d580c39c498",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/huskyci/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "3c243a3b05b0b0eb7792f156759dc72d",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/ibm_app/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "7ca1b3e8ef484602e724db780142effa",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/immuniweb/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "cc4c993ba5e0ff3a6435ff548372ea22",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/kiuwan/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "9acd47b04259f326e54e0912de4473d6",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/microfocus_webinspect/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "b4b21c22e9dc056c5eac45764a1ef63f",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/mozilla_observatory/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "67661b5d1ee5f5fe5422c34d58f7002c",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/openvas_csv/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "e22104d6b64392ec2d949a67e4cfc3f1",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/ort/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "16861b4aedebdeee4d16c914afb38d9a",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/qualys_webapp/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "f83b72b56a3bce1d4cca0555d3297b19",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/retirejs/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "f80cc475fea3fd87b4433052c9303f19",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/safety/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "cd2e66e4fe78193266ff7900d37f7b2f",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/scantist/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "7a0b749fc8c5806ba615983cb3eebfef",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/sonarqube/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "dfb3bf71b9a9998558ce34e51d202e1b",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/sonarqube_api/importer.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "875627b0d2d4bcb50fab40232db4dfe4",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/sslyze/parser_xml.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "2ff19ff38d66ec93915cb03cfcb577c5",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/testssl/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "4b0b57ce0bdba7d71ed0804af82df578",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/trufflehog/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "84f32e41da9436d76b197c7f45e7d177",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/trufflehog3/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "5d534d3353e3417cdb74462cddeea1d1",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/twistlock/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "1029db487fd7e936fcc17f9a7dae00e9",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/vcg/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "5583e3cd61c9b25485bd75a9aa106380",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/wapiti/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "9a1e9e1943f29dadd99b21535782a525",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/mend/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "8efabc364205654a9018e7a530930317",
                            "sourceId": "414bcac6-99fd-4bf7-85f3-1cda3d035c42",
                            "fileName": "dojo/tools/zap/parser.py",
                            "language": "Any"
                        }
                    ],
                    "findings": [
                        {
                            "type": "sast",
                            "id": "0de9f6b51f9f77f5d44f5c346c60c3db",
                            "ruleId": "blacklist:B303",
                            "locationId": "3c9106dad2e3dafc350ca31acee9bc9d",
                            "line": 39,
                            "code": "\n38         for acunetix_defectdojo_finding in acunetix_defectdojo_findings:\n39             dupe_key = hashlib.md5((acunetix_defectdojo_finding.title + acunetix_defectdojo_finding.description).encode(\"utf-8\")).hexdigest()\n40 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/acunetix/parser.py</code>\n<strong>Line number:</strong> <code>39</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n38         for acunetix_defectdojo_finding in acunetix_defectdojo_findings:\n39             dupe_key = hashlib.md5((acunetix_defectdojo_finding.title + acunetix_defectdojo_finding.description).encode(\"utf-8\")).hexdigest()\n40 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "3c9106dad2e3dafc350ca31acee9bc9d",
                                    "sequence": 1,
                                    "code": "\n38         for acunetix_defectdojo_finding in acunetix_defectdojo_findings:\n39             dupe_key = hashlib.md5((acunetix_defectdojo_finding.title + acunetix_defectdojo_finding.description).encode(\"utf-8\")).hexdigest()\n40 \n\n",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "1e4d454f2aba1fa9d4609a77ec9ca654",
                            "ruleId": "blacklist:B410",
                            "locationId": "6161086a58b0d89aa614181096a36001",
                            "line": 5,
                            "code": "\n4 import html2text\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B410</code>\n<strong>Filename:</strong> <code>dojo/tools/acunetix/parser_helper.py</code>\n<strong>Line number:</strong> <code>5</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n4 import html2text\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "6161086a58b0d89aa614181096a36001",
                                    "sequence": 1,
                                    "code": "\n4 import html2text\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n\n",
                                    "line": 5
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "e00377a4224beae04d76ed1fa15b8760",
                            "ruleId": "blacklist:B410",
                            "locationId": "6161086a58b0d89aa614181096a36001",
                            "line": 6,
                            "code": "\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n7 \n8 from .parser_models import AcunetixScanReport, DefectDojoFinding\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B410</code>\n<strong>Filename:</strong> <code>dojo/tools/acunetix/parser_helper.py</code>\n<strong>Line number:</strong> <code>6</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n7 \n8 from .parser_models import AcunetixScanReport, DefectDojoFinding</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "6161086a58b0d89aa614181096a36001",
                                    "sequence": 1,
                                    "code": "\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n7 \n8 from .parser_models import AcunetixScanReport, DefectDojoFinding\n\n",
                                    "line": 6
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "cf4a3a3fe55de993e1a651d1afd4df8a",
                            "ruleId": "blacklist:B320",
                            "locationId": "6161086a58b0d89aa614181096a36001",
                            "line": 23,
                            "code": "\n22     try:\n23         tree = etree.parse(filename, etree.XMLParser(resolve_entities=False))\n24         return tree.getroot()\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B320</code>\n<strong>Filename:</strong> <code>dojo/tools/acunetix/parser_helper.py</code>\n<strong>Line number:</strong> <code>23</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n22     try:\n23         tree = etree.parse(filename, etree.XMLParser(resolve_entities=False))\n24         return tree.getroot()</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "6161086a58b0d89aa614181096a36001",
                                    "sequence": 1,
                                    "code": "\n22     try:\n23         tree = etree.parse(filename, etree.XMLParser(resolve_entities=False))\n24         return tree.getroot()\n\n",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "444e458eb0a1088b8ae09a037fcc1d02",
                            "ruleId": "blacklist:B303",
                            "locationId": "3790121e0cd63ebaab4be1a1fcec7153",
                            "line": 45,
                            "code": "\n44 \n45             dupe_key = hashlib.md5(\"{} | {}\".format(title, i.vuln_source)\n46                 .encode(\"utf-8\")) \\\n47                 .hexdigest()\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/blackduck/parser.py</code>\n<strong>Line number:</strong> <code>45</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n44 \n45             dupe_key = hashlib.md5(\"{} | {}\".format(title, i.vuln_source)\n46                 .encode(\"utf-8\")) \\\n47                 .hexdigest()</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "3790121e0cd63ebaab4be1a1fcec7153",
                                    "sequence": 1,
                                    "code": "\n44 \n45             dupe_key = hashlib.md5(\"{} | {}\".format(title, i.vuln_source)\n46                 .encode(\"utf-8\")) \\\n47                 .hexdigest()\n\n",
                                    "line": 45
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "ee3651b0bcf34b62505906a873e548cf",
                            "ruleId": "blacklist:B303",
                            "locationId": "a9141846b7555573b2eb2504d67b49ab",
                            "line": 73,
                            "code": "\n72 \n73                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n74 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/bugcrowd/parser.py</code>\n<strong>Line number:</strong> <code>73</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n72 \n73                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n74 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "a9141846b7555573b2eb2504d67b49ab",
                                    "sequence": 1,
                                    "code": "\n72 \n73                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n74 \n\n",
                                    "line": 73
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "462dacea95e161d6cde129a69cc0aa2e",
                            "ruleId": "blacklist:B303",
                            "locationId": "55a327221822b1408497557dc26181cf",
                            "line": 62,
                            "code": "\n61             fingerprint = \"bundler-audit\" + gem_name + gem_version + advisory_cve + sev\n62             dupe_key = hashlib.md5(fingerprint.encode(\"utf-8\")).hexdigest()\n63             if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/bundler_audit/parser.py</code>\n<strong>Line number:</strong> <code>62</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n61             fingerprint = \"bundler-audit\" + gem_name + gem_version + advisory_cve + sev\n62             dupe_key = hashlib.md5(fingerprint.encode(\"utf-8\")).hexdigest()\n63             if dupe_key in dupes:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "55a327221822b1408497557dc26181cf",
                                    "sequence": 1,
                                    "code": "\n61             fingerprint = \"bundler-audit\" + gem_name + gem_version + advisory_cve + sev\n62             dupe_key = hashlib.md5(fingerprint.encode(\"utf-8\")).hexdigest()\n63             if dupe_key in dupes:\n\n",
                                    "line": 62
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "61ab9f6171be296023863d237f1b024c",
                            "ruleId": "blacklist:B303",
                            "locationId": "1c1a7e941fb77df05c9cb90b5b30a475",
                            "line": 53,
                            "code": "\n52                     vuln['image_id'] = tree['vendors'][vendor]['image_id']\n53                     unique_key = hashlib.md5(\n54                         str(vuln).encode('utf-8')).hexdigest()\n55                     item = get_item(vuln, test)\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/ccvs/parser.py</code>\n<strong>Line number:</strong> <code>53</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n52                     vuln['image_id'] = tree['vendors'][vendor]['image_id']\n53                     unique_key = hashlib.md5(\n54                         str(vuln).encode('utf-8')).hexdigest()\n55                     item = get_item(vuln, test)</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "1c1a7e941fb77df05c9cb90b5b30a475",
                                    "sequence": 1,
                                    "code": "\n52                     vuln['image_id'] = tree['vendors'][vendor]['image_id']\n53                     unique_key = hashlib.md5(\n54                         str(vuln).encode('utf-8')).hexdigest()\n55                     item = get_item(vuln, test)\n\n",
                                    "line": 53
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "43f4b55dab358910e92bf5751a995fe7",
                            "ruleId": "blacklist:B303",
                            "locationId": "5f29a901208b629641a7fcda30f35d49",
                            "line": 56,
                            "code": "\n55 \n56                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n57 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/cobalt/parser.py</code>\n<strong>Line number:</strong> <code>56</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n55 \n56                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n57 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "5f29a901208b629641a7fcda30f35d49",
                                    "sequence": 1,
                                    "code": "\n55 \n56                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n57 \n\n",
                                    "line": 56
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "5cba45a8efc9bee17233fc5157c536e9",
                            "ruleId": "blacklist:B303",
                            "locationId": "89d676c1ef62be5a0a16f0e1db11562e",
                            "line": 43,
                            "code": "\n42 \n43             dupe_key = hashlib.md5(category.encode('utf-8') + str(cwe).encode('utf-8') + title.encode('utf-8')).hexdigest()\n44 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/contrast/parser.py</code>\n<strong>Line number:</strong> <code>43</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n42 \n43             dupe_key = hashlib.md5(category.encode('utf-8') + str(cwe).encode('utf-8') + title.encode('utf-8')).hexdigest()\n44 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "89d676c1ef62be5a0a16f0e1db11562e",
                                    "sequence": 1,
                                    "code": "\n42 \n43             dupe_key = hashlib.md5(category.encode('utf-8') + str(cwe).encode('utf-8') + title.encode('utf-8')).hexdigest()\n44 \n\n",
                                    "line": 43
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "69c827506c85867e278ab7128a4b8e5b",
                            "ruleId": "hardcoded_bind_all_interfaces:B104",
                            "locationId": "89d676c1ef62be5a0a16f0e1db11562e",
                            "line": 95,
                            "code": "\n94         protocol = \"http\"\n95         host = \"0.0.0.0\"\n96         query = \"\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>hardcoded_bind_all_interfaces</code>\n<strong>Test ID:</strong> <code>B104</code>\n<strong>Filename:</strong> <code>dojo/tools/contrast/parser.py</code>\n<strong>Line number:</strong> <code>95</code>\n<strong>Issue Confidence:</strong> <code>MEDIUM</code>\n<strong>Code:</strong>\n```\n94         protocol = \"http\"\n95         host = \"0.0.0.0\"\n96         query = \"\"</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "89d676c1ef62be5a0a16f0e1db11562e",
                                    "sequence": 1,
                                    "code": "\n94         protocol = \"http\"\n95         host = \"0.0.0.0\"\n96         query = \"\"\n\n",
                                    "line": 95
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "35f5c94b3e10715fcd5efb8024871143",
                            "ruleId": "blacklist:B303",
                            "locationId": "cf7738762dfc0691c7279f5863c0949c",
                            "line": 22,
                            "code": "\n21                                             finding.description)\n22             key = hashlib.md5(key_str.encode('utf-8')).hexdigest()\n23 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/dependency_check/parser.py</code>\n<strong>Line number:</strong> <code>22</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n21                                             finding.description)\n22             key = hashlib.md5(key_str.encode('utf-8')).hexdigest()\n23 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "cf7738762dfc0691c7279f5863c0949c",
                                    "sequence": 1,
                                    "code": "\n21                                             finding.description)\n22             key = hashlib.md5(key_str.encode('utf-8')).hexdigest()\n23 \n\n",
                                    "line": 22
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "6f9cefff7a771d4de4e934264957036e",
                            "ruleId": "blacklist:B303",
                            "locationId": "4c9f0fc8536d4104e3e16228214e11e7",
                            "line": 345,
                            "code": "\n344             if finding is not None:\n345                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n346 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/generic/parser.py</code>\n<strong>Line number:</strong> <code>345</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n344             if finding is not None:\n345                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n346 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "4c9f0fc8536d4104e3e16228214e11e7",
                                    "sequence": 1,
                                    "code": "\n344             if finding is not None:\n345                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n346 \n\n",
                                    "line": 345
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "758b22f6984918854d24db04a880f445",
                            "ruleId": "blacklist:B303",
                            "locationId": "77e3069c340ef98bdd536378cfe7dfcf",
                            "line": 57,
                            "code": "\n56 \n57                 dupe_key = hashlib.md5((issue[\"offender\"]).encode(\"utf-8\")).hexdigest()\n58 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/gitleaks/parser.py</code>\n<strong>Line number:</strong> <code>57</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n56 \n57                 dupe_key = hashlib.md5((issue[\"offender\"]).encode(\"utf-8\")).hexdigest()\n58 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "77e3069c340ef98bdd536378cfe7dfcf",
                                    "sequence": 1,
                                    "code": "\n56 \n57                 dupe_key = hashlib.md5((issue[\"offender\"]).encode(\"utf-8\")).hexdigest()\n58 \n\n",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "87e1e8af866b1600fed036c27a136fb5",
                            "ruleId": "blacklist:B303",
                            "locationId": "58e84dd9a81bbb703c0c4f097a5291a5",
                            "line": 77,
                            "code": "\n76 \n77             dupe_key = hashlib.md5(str(references + title).encode('utf-8')).hexdigest()\n78             if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/h1/parser.py</code>\n<strong>Line number:</strong> <code>77</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n76 \n77             dupe_key = hashlib.md5(str(references + title).encode('utf-8')).hexdigest()\n78             if dupe_key in dupes:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "58e84dd9a81bbb703c0c4f097a5291a5",
                                    "sequence": 1,
                                    "code": "\n76 \n77             dupe_key = hashlib.md5(str(references + title).encode('utf-8')).hexdigest()\n78             if dupe_key in dupes:\n\n",
                                    "line": 77
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a6586df0d1d8f26fdd3cde4f13fe0786",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "58e84dd9a81bbb703c0c4f097a5291a5",
                            "line": 125,
                            "code": "\n124             description += \"CVSS: {}\\n\".format(cvss)\n125         except:\n126             pass\n127 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code>\n<strong>Test ID:</strong> <code>B110</code>\n<strong>Filename:</strong> <code>dojo/tools/h1/parser.py</code>\n<strong>Line number:</strong> <code>125</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n124             description += \"CVSS: {}\\n\".format(cvss)\n125         except:\n126             pass\n127 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "58e84dd9a81bbb703c0c4f097a5291a5",
                                    "sequence": 1,
                                    "code": "\n124             description += \"CVSS: {}\\n\".format(cvss)\n125         except:\n126             pass\n127 \n\n",
                                    "line": 125
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "21617c91c1c64b06e99448aefd3fd493",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "58e84dd9a81bbb703c0c4f097a5291a5",
                            "line": 136,
                            "code": "\n135             description += \"\\n##Weakness: {}\\n{}\".format(weakness_title, weakness_desc)\n136         except:\n137             pass\n138 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code>\n<strong>Test ID:</strong> <code>B110</code>\n<strong>Filename:</strong> <code>dojo/tools/h1/parser.py</code>\n<strong>Line number:</strong> <code>136</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n135             description += \"\\n##Weakness: {}\\n{}\".format(weakness_title, weakness_desc)\n136         except:\n137             pass\n138 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "58e84dd9a81bbb703c0c4f097a5291a5",
                                    "sequence": 1,
                                    "code": "\n135             description += \"\\n##Weakness: {}\\n{}\".format(weakness_title, weakness_desc)\n136         except:\n137             pass\n138 \n\n",
                                    "line": 136
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "538305c0b5bfc6ecd86bc160ec478f2d",
                            "ruleId": "blacklist:B303",
                            "locationId": "dd2c5079aea37e3b531c2d580c39c498",
                            "line": 55,
                            "code": "\n54                             continue\n55                         unique_key = hashlib.md5(\n56                             str(vuln).encode('utf-8')).hexdigest()\n57                         item = get_item(vuln, test)\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/huskyci/parser.py</code>\n<strong>Line number:</strong> <code>55</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n54                             continue\n55                         unique_key = hashlib.md5(\n56                             str(vuln).encode('utf-8')).hexdigest()\n57                         item = get_item(vuln, test)</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "dd2c5079aea37e3b531c2d580c39c498",
                                    "sequence": 1,
                                    "code": "\n54                             continue\n55                         unique_key = hashlib.md5(\n56                             str(vuln).encode('utf-8')).hexdigest()\n57                         item = get_item(vuln, test)\n\n",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "47d70942d29f427215e5c74c3ad6035f",
                            "ruleId": "blacklist:B303",
                            "locationId": "3c243a3b05b0b0eb7792f156759dc72d",
                            "line": 89,
                            "code": "\n88                     # Now time to start assigning issues to findings and endpoints\n89                     dupe_key = hashlib.md5(str(issue_description + name + severity).encode('utf-8')).hexdigest()\n90                     # check if finding is a duplicate\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/ibm_app/parser.py</code>\n<strong>Line number:</strong> <code>89</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n88                     # Now time to start assigning issues to findings and endpoints\n89                     dupe_key = hashlib.md5(str(issue_description + name + severity).encode('utf-8')).hexdigest()\n90                     # check if finding is a duplicate</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "3c243a3b05b0b0eb7792f156759dc72d",
                                    "sequence": 1,
                                    "code": "\n88                     # Now time to start assigning issues to findings and endpoints\n89                     dupe_key = hashlib.md5(str(issue_description + name + severity).encode('utf-8')).hexdigest()\n90                     # check if finding is a duplicate\n\n",
                                    "line": 89
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "f11a9c9462cb29a32a659063c0fbd569",
                            "ruleId": "blacklist:B303",
                            "locationId": "7ca1b3e8ef484602e724db780142effa",
                            "line": 71,
                            "code": "\n70 \n71             dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n72 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/immuniweb/parser.py</code>\n<strong>Line number:</strong> <code>71</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n70 \n71             dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n72 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "7ca1b3e8ef484602e724db780142effa",
                                    "sequence": 1,
                                    "code": "\n70 \n71             dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n72 \n\n",
                                    "line": 71
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "609db99a4a967932b87c1236a3c39390",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "cc4c993ba5e0ff3a6435ff548372ea22",
                            "line": 79,
                            "code": "\n78                 finding.cwe = int(row['CWE'])\n79             except:\n80                 pass\n81 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code>\n<strong>Test ID:</strong> <code>B110</code>\n<strong>Filename:</strong> <code>dojo/tools/kiuwan/parser.py</code>\n<strong>Line number:</strong> <code>79</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n78                 finding.cwe = int(row['CWE'])\n79             except:\n80                 pass\n81 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "cc4c993ba5e0ff3a6435ff548372ea22",
                                    "sequence": 1,
                                    "code": "\n78                 finding.cwe = int(row['CWE'])\n79             except:\n80                 pass\n81 \n\n",
                                    "line": 79
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "59bf514ae123c93ddd21a0ab85128425",
                            "ruleId": "blacklist:B303",
                            "locationId": "cc4c993ba5e0ff3a6435ff548372ea22",
                            "line": 88,
                            "code": "\n87 \n88                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n89 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/kiuwan/parser.py</code>\n<strong>Line number:</strong> <code>88</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n87 \n88                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n89 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "cc4c993ba5e0ff3a6435ff548372ea22",
                                    "sequence": 1,
                                    "code": "\n87 \n88                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n89 \n\n",
                                    "line": 88
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "455c438cc42a88d56aaabe1fbaa35fe5",
                            "ruleId": "blacklist:B303",
                            "locationId": "9acd47b04259f326e54e0912de4473d6",
                            "line": 72,
                            "code": "\n71                 # make dupe hash key\n72                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n73                 # check if dupes are present.\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/microfocus_webinspect/parser.py</code>\n<strong>Line number:</strong> <code>72</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n71                 # make dupe hash key\n72                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n73                 # check if dupes are present.</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "9acd47b04259f326e54e0912de4473d6",
                                    "sequence": 1,
                                    "code": "\n71                 # make dupe hash key\n72                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n73                 # check if dupes are present.\n\n",
                                    "line": 72
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "646105e7a67fa5c2be2f3f607adb5680",
                            "ruleId": "blacklist:B303",
                            "locationId": "b4b21c22e9dc056c5eac45764a1ef63f",
                            "line": 55,
                            "code": "\n54 \n55                 dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n56 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/mozilla_observatory/parser.py</code>\n<strong>Line number:</strong> <code>55</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n54 \n55                 dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n56 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "b4b21c22e9dc056c5eac45764a1ef63f",
                                    "sequence": 1,
                                    "code": "\n54 \n55                 dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n56 \n\n",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "ddd4b443b6a444b7f48c5c2f095c029a",
                            "ruleId": "blacklist:B303",
                            "locationId": "67661b5d1ee5f5fe5422c34d58f7002c",
                            "line": 348,
                            "code": "\n347 \n348                 key = hashlib.md5((finding.url + '|' + finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n349 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/openvas_csv/parser.py</code>\n<strong>Line number:</strong> <code>348</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n347 \n348                 key = hashlib.md5((finding.url + '|' + finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n349 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "67661b5d1ee5f5fe5422c34d58f7002c",
                                    "sequence": 1,
                                    "code": "\n347 \n348                 key = hashlib.md5((finding.url + '|' + finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n349 \n\n",
                                    "line": 348
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "296c4e937c65207d423c6391ba057398",
                            "ruleId": "blacklist:B303",
                            "locationId": "e22104d6b64392ec2d949a67e4cfc3f1",
                            "line": 55,
                            "code": "\n54             item = get_item(model, test)\n55             unique_key = hashlib.md5((item.title + item.references).encode()).hexdigest()\n56             items[unique_key] = item\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/ort/parser.py</code>\n<strong>Line number:</strong> <code>55</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n54             item = get_item(model, test)\n55             unique_key = hashlib.md5((item.title + item.references).encode()).hexdigest()\n56             items[unique_key] = item</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "e22104d6b64392ec2d949a67e4cfc3f1",
                                    "sequence": 1,
                                    "code": "\n54             item = get_item(model, test)\n55             unique_key = hashlib.md5((item.title + item.references).encode()).hexdigest()\n56             items[unique_key] = item\n\n",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "8f57998e8e7fb362172b19ec8a06a10b",
                            "ruleId": "blacklist:B405",
                            "locationId": "16861b4aedebdeee4d16c914afb38d9a",
                            "line": 7,
                            "code": "\n6 import re\n7 import xml.etree.ElementTree\n8 from datetime import datetime\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B405</code>\n<strong>Filename:</strong> <code>dojo/tools/qualys_webapp/parser.py</code>\n<strong>Line number:</strong> <code>7</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n6 import re\n7 import xml.etree.ElementTree\n8 from datetime import datetime</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "16861b4aedebdeee4d16c914afb38d9a",
                                    "sequence": 1,
                                    "code": "\n6 import re\n7 import xml.etree.ElementTree\n8 from datetime import datetime\n\n",
                                    "line": 7
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "3fc5d496e453957b4942596c746ea6b2",
                            "ruleId": "blacklist:B314",
                            "locationId": "16861b4aedebdeee4d16c914afb38d9a",
                            "line": 237,
                            "code": "\n236     # supposed to be safe against XEE: https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n237     tree = xml.etree.ElementTree.parse(qualys_xml_file)\n238     is_app_report = tree.getroot().tag == 'WAS_WEBAPP_REPORT'\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B314</code>\n<strong>Filename:</strong> <code>dojo/tools/qualys_webapp/parser.py</code>\n<strong>Line number:</strong> <code>237</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n236     # supposed to be safe against XEE: https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n237     tree = xml.etree.ElementTree.parse(qualys_xml_file)\n238     is_app_report = tree.getroot().tag == 'WAS_WEBAPP_REPORT'</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "16861b4aedebdeee4d16c914afb38d9a",
                                    "sequence": 1,
                                    "code": "\n236     # supposed to be safe against XEE: https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n237     tree = xml.etree.ElementTree.parse(qualys_xml_file)\n238     is_app_report = tree.getroot().tag == 'WAS_WEBAPP_REPORT'\n\n",
                                    "line": 237
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "ba403c90d680127c3290edaae505c4e5",
                            "ruleId": "blacklist:B303",
                            "locationId": "f83b72b56a3bce1d4cca0555d3297b19",
                            "line": 35,
                            "code": "\n34                         encrypted_file = node['file']\n35                         unique_key = hashlib.md5((item.title + item.references + encrypted_file).encode()).hexdigest()\n36                         items[unique_key] = item\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/retirejs/parser.py</code>\n<strong>Line number:</strong> <code>35</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n34                         encrypted_file = node['file']\n35                         unique_key = hashlib.md5((item.title + item.references + encrypted_file).encode()).hexdigest()\n36                         items[unique_key] = item</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "f83b72b56a3bce1d4cca0555d3297b19",
                                    "sequence": 1,
                                    "code": "\n34                         encrypted_file = node['file']\n35                         unique_key = hashlib.md5((item.title + item.references + encrypted_file).encode()).hexdigest()\n36                         items[unique_key] = item\n\n",
                                    "line": 35
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "5ffb3d93d8df41f95f4605a21e7bb641",
                            "ruleId": "blacklist:B310",
                            "locationId": "f80cc475fea3fd87b4433052c9303f19",
                            "line": 25,
                            "code": "\n24         try:\n25             response = urllib.request.urlopen(url)\n26             return json.load(response)\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B310</code>\n<strong>Filename:</strong> <code>dojo/tools/safety/parser.py</code>\n<strong>Line number:</strong> <code>25</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n24         try:\n25             response = urllib.request.urlopen(url)\n26             return json.load(response)</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "f80cc475fea3fd87b4433052c9303f19",
                                    "sequence": 1,
                                    "code": "\n24         try:\n25             response = urllib.request.urlopen(url)\n26             return json.load(response)\n\n",
                                    "line": 25
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "afbe0053bf5ede3983d6a99911adfa87",
                            "ruleId": "blacklist:B303",
                            "locationId": "cd2e66e4fe78193266ff7900d37f7b2f",
                            "line": 85,
                            "code": "\n84             if item:\n85                 hash_key = hashlib.md5(\n86                     node.get('Public ID').encode('utf-8') + node.get('Library').encode('utf-8')).hexdigest()\n87 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/scantist/parser.py</code>\n<strong>Line number:</strong> <code>85</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n84             if item:\n85                 hash_key = hashlib.md5(\n86                     node.get('Public ID').encode('utf-8') + node.get('Library').encode('utf-8')).hexdigest()\n87 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "cd2e66e4fe78193266ff7900d37f7b2f",
                                    "sequence": 1,
                                    "code": "\n84             if item:\n85                 hash_key = hashlib.md5(\n86                     node.get('Public ID').encode('utf-8') + node.get('Library').encode('utf-8')).hexdigest()\n87 \n\n",
                                    "line": 85
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "661907213c06a0210fc92bb6cb38fa13",
                            "ruleId": "blacklist:B410",
                            "locationId": "7a0b749fc8c5806ba615983cb3eebfef",
                            "line": 5,
                            "code": "\n4 from django.utils.html import strip_tags\n5 from lxml import etree\n6 \n7 from dojo.models import Finding\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B410</code>\n<strong>Filename:</strong> <code>dojo/tools/sonarqube/parser.py</code>\n<strong>Line number:</strong> <code>5</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n4 from django.utils.html import strip_tags\n5 from lxml import etree\n6 \n7 from dojo.models import Finding</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "7a0b749fc8c5806ba615983cb3eebfef",
                                    "sequence": 1,
                                    "code": "\n4 from django.utils.html import strip_tags\n5 from lxml import etree\n6 \n7 from dojo.models import Finding\n\n",
                                    "line": 5
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "d75ed3e174bd3d19487f9625e154d407",
                            "ruleId": "blacklist:B320",
                            "locationId": "7a0b749fc8c5806ba615983cb3eebfef",
                            "line": 33,
                            "code": "\n32         parser = etree.HTMLParser()\n33         tree = etree.parse(filename, parser)\n34         if self.mode not in [None, 'detailed']:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B320</code>\n<strong>Filename:</strong> <code>dojo/tools/sonarqube/parser.py</code>\n<strong>Line number:</strong> <code>33</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n32         parser = etree.HTMLParser()\n33         tree = etree.parse(filename, parser)\n34         if self.mode not in [None, 'detailed']:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "7a0b749fc8c5806ba615983cb3eebfef",
                                    "sequence": 1,
                                    "code": "\n32         parser = etree.HTMLParser()\n33         tree = etree.parse(filename, parser)\n34         if self.mode not in [None, 'detailed']:\n\n",
                                    "line": 33
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "cba11ca9ee5bc5661c529b8dc77deb9e",
                            "ruleId": "blacklist:B410",
                            "locationId": "dfb3bf71b9a9998558ce34e51d202e1b",
                            "line": 5,
                            "code": "\n4 import html2text\n5 from lxml import etree\n6 \n7 from dojo.models import Finding, Sonarqube_Issue\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B410</code>\n<strong>Filename:</strong> <code>dojo/tools/sonarqube_api/importer.py</code>\n<strong>Line number:</strong> <code>5</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n4 import html2text\n5 from lxml import etree\n6 \n7 from dojo.models import Finding, Sonarqube_Issue</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "dfb3bf71b9a9998558ce34e51d202e1b",
                                    "sequence": 1,
                                    "code": "\n4 import html2text\n5 from lxml import etree\n6 \n7 from dojo.models import Finding, Sonarqube_Issue\n\n",
                                    "line": 5
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "521233c7be66f3d79ffe42fbb00c6a12",
                            "ruleId": "blacklist:B320",
                            "locationId": "dfb3bf71b9a9998558ce34e51d202e1b",
                            "line": 162,
                            "code": "\n161         parser = etree.HTMLParser()\n162         details = etree.fromstring(vuln_details, parser)\n163         rule_references = \"\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B320</code>\n<strong>Filename:</strong> <code>dojo/tools/sonarqube_api/importer.py</code>\n<strong>Line number:</strong> <code>162</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n161         parser = etree.HTMLParser()\n162         details = etree.fromstring(vuln_details, parser)\n163         rule_references = \"\"</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "dfb3bf71b9a9998558ce34e51d202e1b",
                                    "sequence": 1,
                                    "code": "\n161         parser = etree.HTMLParser()\n162         details = etree.fromstring(vuln_details, parser)\n163         rule_references = \"\"\n\n",
                                    "line": 162
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "b1e97b11405cf75219c954fd9fca038e",
                            "ruleId": "blacklist:B303",
                            "locationId": "875627b0d2d4bcb50fab40232db4dfe4",
                            "line": 124,
                            "code": "\n123                 if title and description is not None:\n124                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n125                     if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/sslyze/parser_xml.py</code>\n<strong>Line number:</strong> <code>124</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n123                 if title and description is not None:\n124                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n125                     if dupe_key in dupes:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "875627b0d2d4bcb50fab40232db4dfe4",
                                    "sequence": 1,
                                    "code": "\n123                 if title and description is not None:\n124                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n125                     if dupe_key in dupes:\n\n",
                                    "line": 124
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "2d3777c3524ab0360472d5e99b93eec4",
                            "ruleId": "blacklist:B303",
                            "locationId": "2ff19ff38d66ec93915cb03cfcb577c5",
                            "line": 61,
                            "code": "\n60                 if title and description is not None:\n61                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n62                     if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/testssl/parser.py</code>\n<strong>Line number:</strong> <code>61</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n60                 if title and description is not None:\n61                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n62                     if dupe_key in dupes:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "2ff19ff38d66ec93915cb03cfcb577c5",
                                    "sequence": 1,
                                    "code": "\n60                 if title and description is not None:\n61                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n62                     if dupe_key in dupes:\n\n",
                                    "line": 61
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "b8b2fcade2feb0c6a3da2ff034090b3e",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "2ff19ff38d66ec93915cb03cfcb577c5",
                            "line": 103,
                            "code": "\n102             host = rhost.group(4)\n103         except:\n104             pass\n105         try:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code>\n<strong>Test ID:</strong> <code>B110</code>\n<strong>Filename:</strong> <code>dojo/tools/testssl/parser.py</code>\n<strong>Line number:</strong> <code>103</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n102             host = rhost.group(4)\n103         except:\n104             pass\n105         try:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "2ff19ff38d66ec93915cb03cfcb577c5",
                                    "sequence": 1,
                                    "code": "\n102             host = rhost.group(4)\n103         except:\n104             pass\n105         try:\n\n",
                                    "line": 103
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a3db00ca2dff2e7b0fa26882897a3556",
                            "ruleId": "blacklist:B303",
                            "locationId": "4b0b57ce0bdba7d71ed0804af82df578",
                            "line": 54,
                            "code": "\n53 \n54             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n55             description += \"\\n**Strings Found:**\\n\\`\\`\\`\" + strings_found + \"\\`\\`\\`\\n\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/trufflehog/parser.py</code>\n<strong>Line number:</strong> <code>54</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n<code>``\n53 \n54             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n55             description += \"\\n**Strings Found:**\\n\\</code>``\" + strings_found + \"```\\n\"</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "4b0b57ce0bdba7d71ed0804af82df578",
                                    "sequence": 1,
                                    "code": "\n53 \n54             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n55             description += \"\\n**Strings Found:**\\n\\`\\`\\`\" + strings_found + \"\\`\\`\\`\\n\"\n\n",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "7ba51b11412df34d621951d741f807e5",
                            "ruleId": "blacklist:B303",
                            "locationId": "84f32e41da9436d76b197c7f45e7d177",
                            "line": 50,
                            "code": "\n49 \n50             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n51             description += \"\\n**Strings Found:**\\n\\`\\`\\`\\n\" + strings_found + \"\\n\\`\\`\\`\\n\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/trufflehog3/parser.py</code>\n<strong>Line number:</strong> <code>50</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n<code>``\n49 \n50             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n51             description += \"\\n**Strings Found:**\\n\\</code>``\\n\" + strings_found + \"\\n```\\n\"</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "84f32e41da9436d76b197c7f45e7d177",
                                    "sequence": 1,
                                    "code": "\n49 \n50             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n51             description += \"\\n**Strings Found:**\\n\\`\\`\\`\\n\" + strings_found + \"\\n\\`\\`\\`\\n\"\n\n",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "cb6ad114fe7b6489008a37afe557eaae",
                            "ruleId": "blacklist:B303",
                            "locationId": "5d534d3353e3417cdb74462cddeea1d1",
                            "line": 71,
                            "code": "\n70             if finding is not None:\n71                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n72                 if key not in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/twistlock/parser.py</code>\n<strong>Line number:</strong> <code>71</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n70             if finding is not None:\n71                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n72                 if key not in dupes:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "5d534d3353e3417cdb74462cddeea1d1",
                                    "sequence": 1,
                                    "code": "\n70             if finding is not None:\n71                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n72                 if key not in dupes:\n\n",
                                    "line": 71
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "d27287d76897fa8b1f0816925f22ded3",
                            "ruleId": "blacklist:B303",
                            "locationId": "1029db487fd7e936fcc17f9a7dae00e9",
                            "line": 114,
                            "code": "\n113             if finding is not None:\n114                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n115 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/vcg/parser.py</code>\n<strong>Line number:</strong> <code>114</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n113             if finding is not None:\n114                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n115 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "1029db487fd7e936fcc17f9a7dae00e9",
                                    "sequence": 1,
                                    "code": "\n113             if finding is not None:\n114                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n115 \n\n",
                                    "line": 114
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "686d435fc882c9f61b00a2ce1c0555db",
                            "ruleId": "blacklist:B303",
                            "locationId": "1029db487fd7e936fcc17f9a7dae00e9",
                            "line": 174,
                            "code": "\n173             if finding is not None:\n174                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n175 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/vcg/parser.py</code>\n<strong>Line number:</strong> <code>174</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n173             if finding is not None:\n174                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n175 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "1029db487fd7e936fcc17f9a7dae00e9",
                                    "sequence": 1,
                                    "code": "\n173             if finding is not None:\n174                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n175 \n\n",
                                    "line": 174
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "7b752ad4ec321774fd22ddead3caa4b1",
                            "ruleId": "blacklist:B303",
                            "locationId": "5583e3cd61c9b25485bd75a9aa106380",
                            "line": 75,
                            "code": "\n74                 # make dupe hash key\n75                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n76                 # check if dupes are present.\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/wapiti/parser.py</code>\n<strong>Line number:</strong> <code>75</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n74                 # make dupe hash key\n75                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n76                 # check if dupes are present.</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "5583e3cd61c9b25485bd75a9aa106380",
                                    "sequence": 1,
                                    "code": "\n74                 # make dupe hash key\n75                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n76                 # check if dupes are present.\n\n",
                                    "line": 75
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a8421f9feb91945606c0a1905b179267",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "5583e3cd61c9b25485bd75a9aa106380",
                            "line": 124,
                            "code": "\n123             host = rhost[4]\n124         except:\n125             pass\n126         try:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code>\n<strong>Test ID:</strong> <code>B110</code>\n<strong>Filename:</strong> <code>dojo/tools/wapiti/parser.py</code>\n<strong>Line number:</strong> <code>124</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n123             host = rhost[4]\n124         except:\n125             pass\n126         try:</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "5583e3cd61c9b25485bd75a9aa106380",
                                    "sequence": 1,
                                    "code": "\n123             host = rhost[4]\n124         except:\n125             pass\n126         try:\n\n",
                                    "line": 124
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "3d95e7cbc335474a320b075e7c431fc9",
                            "ruleId": "blacklist:B303",
                            "locationId": "9a1e9e1943f29dadd99b21535782a525",
                            "line": 104,
                            "code": "\n103         def _dedup_and_create_finding(dupes, vuln):\n104             dupe_key = hashlib.md5(vuln.get('description').encode('utf-8') + vuln.get('title').encode('utf-8')).hexdigest()\n105 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code>\n<strong>Test ID:</strong> <code>B303</code>\n<strong>Filename:</strong> <code>dojo/tools/mend/parser.py</code>\n<strong>Line number:</strong> <code>104</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n103         def _dedup_and_create_finding(dupes, vuln):\n104             dupe_key = hashlib.md5(vuln.get('description').encode('utf-8') + vuln.get('title').encode('utf-8')).hexdigest()\n105 </p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "9a1e9e1943f29dadd99b21535782a525",
                                    "sequence": 1,
                                    "code": "\n103         def _dedup_and_create_finding(dupes, vuln):\n104             dupe_key = hashlib.md5(vuln.get('description').encode('utf-8') + vuln.get('title').encode('utf-8')).hexdigest()\n105 \n\n",
                                    "line": 104
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "ab6acf517657e404a93de719b1fc0b77",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "8efabc364205654a9018e7a530930317",
                            "line": 162,
                            "code": "\n161             return socket.gethostbyname(host)\n162         except:\n163             pass\n164         return host\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code>\n<strong>Test ID:</strong> <code>B110</code>\n<strong>Filename:</strong> <code>dojo/tools/zap/parser.py</code>\n<strong>Line number:</strong> <code>162</code>\n<strong>Issue Confidence:</strong> <code>HIGH</code>\n<strong>Code:</strong>\n```\n161             return socket.gethostbyname(host)\n162         except:\n163             pass\n164         return host</p>\n<p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "8efabc364205654a9018e7a530930317",
                                    "sequence": 1,
                                    "code": "\n161             return socket.gethostbyname(host)\n162         except:\n163             pass\n164         return host\n\n",
                                    "line": 162
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "$schema": "https://docs.appsec-hub.ru/"
}