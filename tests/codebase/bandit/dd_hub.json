{
    "version": "1.0.1",
    "scans": [
        {
            "scanDetails": {
                "id": "badbc322-2004-40d6-9c84-f044616ac17a",
                "description": "Import bandit results"
            },
            "source": [
                {
                    "id": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                    "type": "codebase",
                    "name": "hub-tool-converters",
                    "url": "https://github.com/Swordfish-Security/hub-tool-converters.git",
                    "checkoutPath": "/",
                    "branch": "master",
                    "commit": "master",
                    "vcsType": "git",
                    "buildTool": "maven"
                }
            ],
            "tool": {
                "product": "bandit"
            },
            "results": [
                {
                    "rules": [
                        {
                            "type": "sast",
                            "name": "blacklist:B303",
                            "id": "blacklist:B303",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Use of insecure MD2, MD4, MD5, or SHA1 hash function.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b303-md5"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B410",
                            "id": "blacklist:B410",
                            "severity": "Low",
                            "cwe": null,
                            "description": "Using etree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace etree with the equivalent defusedxml package.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b410-import-lxml"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B320",
                            "id": "blacklist:B320",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-etree"
                        },
                        {
                            "type": "sast",
                            "name": "hardcoded_bind_all_interfaces:B104",
                            "id": "hardcoded_bind_all_interfaces:B104",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Possible binding to all interfaces.\nhttps://bandit.readthedocs.io/en/latest/plugins/b104_hardcoded_bind_all_interfaces.html"
                        },
                        {
                            "type": "sast",
                            "name": "try_except_pass:B110",
                            "id": "try_except_pass:B110",
                            "severity": "Low",
                            "cwe": null,
                            "description": "Try, Except, Pass detected.\nhttps://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B405",
                            "id": "blacklist:B405",
                            "severity": "Low",
                            "cwe": null,
                            "description": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b405-import-xml-etree"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B314",
                            "id": "blacklist:B314",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree"
                        },
                        {
                            "type": "sast",
                            "name": "blacklist:B310",
                            "id": "blacklist:B310",
                            "severity": "Medium",
                            "cwe": null,
                            "description": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.\nhttps://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen"
                        }
                    ],
                    "locations": [
                        {
                            "type": "codebase",
                            "id": "06d7c7d3bdb7332f5d49fbf2b5555edd",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/acunetix/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "0deaed9becd1ab103ab6de82c73af401",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/acunetix/parser_helper.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "64b8f0b6787420b9f90cbafaa22dfa09",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/blackduck/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "459ac706cd9c291b50c3267ba97087ba",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/bugcrowd/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "58d7a5b0fded907766518bb1225ce3c1",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/bundler_audit/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "6f064b1e9831c857b9b7bf65234c45db",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/ccvs/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "f756a74bbc8cf187f82bb5b3c3a0e433",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/cobalt/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "b8a390396c5dc2ad5b18f4e0dd80e2b0",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/contrast/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "6a374dece7175ccbac6c64e86ef55435",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/dependency_check/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "37802763fc43f7023e321b83ada8759e",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/generic/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "e04806d03632da2a5c207fe8728241c9",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/gitleaks/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "70d2be227da8ced8f6aabda247890d38",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/h1/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "06467e431664130b895dfe86c0ba6582",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/huskyci/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "de0d42fe5f463f827b1eb313875d8f10",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/ibm_app/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "66f335d306aa2affbff78292edb1d8a9",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/immuniweb/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "aff67882343ec104a94fbba32b9f3924",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/kiuwan/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "fcc123836c216057853f68de4a53d600",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/microfocus_webinspect/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "f3e09bf5f95c594d059d5637fcd0c6e4",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/mozilla_observatory/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "0d9301840c9c2996b6b225a8d554ca81",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/openvas_csv/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "07faf7e5c433779304f00ca755178465",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/ort/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "448e71f236d95c86843491990f1b0ae3",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/qualys_webapp/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "711cf7dd2915eed3374c8185c9530a24",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/retirejs/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "b7c95fa1ddc8dc2f6b458646fdb163bc",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/safety/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "310ef0d0d2b1b746d8b02cd0fac13ace",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/scantist/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "7e25837084d8f9ed1546c889b2fcfe68",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/sonarqube/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "75214d5e4cc7f7e9223dbb11951e3055",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/sonarqube_api/importer.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "0d7fd46316f8a760481959f6e7d5922c",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/sslyze/parser_xml.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "7e5ba448e3daa82efa37fca08b8843d9",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/testssl/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "6e570cd1615066b07e78691a85d99a15",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/trufflehog/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "f2ae9eb8d9911f5b26fd966695546cca",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/trufflehog3/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "79ee1c4232266bb74ffb75345e7198cd",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/twistlock/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "9ee847f7e95ac48679c0a423d9bd9918",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/vcg/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "5f9fc123b06283563362a7a1329f5897",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/wapiti/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "bb448050a7950c382d44436d36c02d6a",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/mend/parser.py",
                            "language": "Any"
                        },
                        {
                            "type": "codebase",
                            "id": "992591c24bda4ba3d78dc21411de19b9",
                            "sourceId": "9904c7a8-ced8-46f5-b1d8-9503c5aa65ec",
                            "fileName": "project/tools/zap/parser.py",
                            "language": "Any"
                        }
                    ],
                    "findings": [
                        {
                            "type": "sast",
                            "id": "6f74bf037528bb9914e9178586180465",
                            "ruleId": "blacklist:B303",
                            "locationId": "06d7c7d3bdb7332f5d49fbf2b5555edd",
                            "line": 39,
                            "code": "\n38         for acunetix_project_finding in acunetix_project_findings:\n39             dupe_key = hashlib.md5((acunetix_project_finding.title + acunetix_project.description).encode(\"utf-8\")).hexdigest()\n40 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/acunetix/parser.py</code><br /><strong>Line number:</strong> <code>39</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />38         for acunetix_project_finding in acunetix_project_findings:<br />39             dupe_key = hashlib.md5((acunetix_project_finding.title + acunetix_project.description).encode(\"utf-8\")).hexdigest()<br />40 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "06d7c7d3bdb7332f5d49fbf2b5555edd",
                                    "sequence": 1,
                                    "code": "\n38         for acunetix_project_finding in acunetix_project_findings:\n39             dupe_key = hashlib.md5((acunetix_project_finding.title + acunetix_project.description).encode(\"utf-8\")).hexdigest()\n40 \n\n",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "edffd6450f0ef71590c60d2d03d42946",
                            "ruleId": "blacklist:B410",
                            "locationId": "0deaed9becd1ab103ab6de82c73af401",
                            "line": 5,
                            "code": "\n4 import html2text\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B410</code><br /><strong>Filename:</strong> <code>project/tools/acunetix/parser_helper.py</code><br /><strong>Line number:</strong> <code>5</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />4 import html2text<br />5 from lxml import etree<br />6 from lxml.etree import XMLSyntaxError</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "0deaed9becd1ab103ab6de82c73af401",
                                    "sequence": 1,
                                    "code": "\n4 import html2text\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n\n",
                                    "line": 5
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "f6150add87be2f29f58a2a39cc086370",
                            "ruleId": "blacklist:B410",
                            "locationId": "0deaed9becd1ab103ab6de82c73af401",
                            "line": 6,
                            "code": "\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n7 \n8 from .parser_models import AcunetixScanReport, ProjectFinding\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B410</code><br /><strong>Filename:</strong> <code>project/tools/acunetix/parser_helper.py</code><br /><strong>Line number:</strong> <code>6</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />5 from lxml import etree<br />6 from lxml.etree import XMLSyntaxError<br />7 <br />8 from .parser_models import AcunetixScanReport, ProjectFinding</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "0deaed9becd1ab103ab6de82c73af401",
                                    "sequence": 1,
                                    "code": "\n5 from lxml import etree\n6 from lxml.etree import XMLSyntaxError\n7 \n8 from .parser_models import AcunetixScanReport, ProjectFinding\n\n",
                                    "line": 6
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "29c7a1e1e765a935b5a64fa2b90dfee9",
                            "ruleId": "blacklist:B320",
                            "locationId": "0deaed9becd1ab103ab6de82c73af401",
                            "line": 23,
                            "code": "\n22     try:\n23         tree = etree.parse(filename, etree.XMLParser(resolve_entities=False))\n24         return tree.getroot()\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B320</code><br /><strong>Filename:</strong> <code>project/tools/acunetix/parser_helper.py</code><br /><strong>Line number:</strong> <code>23</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />22     try:<br />23         tree = etree.parse(filename, etree.XMLParser(resolve_entities=False))<br />24         return tree.getroot()</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "0deaed9becd1ab103ab6de82c73af401",
                                    "sequence": 1,
                                    "code": "\n22     try:\n23         tree = etree.parse(filename, etree.XMLParser(resolve_entities=False))\n24         return tree.getroot()\n\n",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "886cb1b57528c35df537cc8885856716",
                            "ruleId": "blacklist:B303",
                            "locationId": "64b8f0b6787420b9f90cbafaa22dfa09",
                            "line": 45,
                            "code": "\n44 \n45             dupe_key = hashlib.md5(\"{} | {}\".format(title, i.vuln_source)\n46                 .encode(\"utf-8\")) \\\n47                 .hexdigest()\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/blackduck/parser.py</code><br /><strong>Line number:</strong> <code>45</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />44 <br />45             dupe_key = hashlib.md5(\"{} | {}\".format(title, i.vuln_source)<br />46                 .encode(\"utf-8\")) \\<br />47                 .hexdigest()</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "64b8f0b6787420b9f90cbafaa22dfa09",
                                    "sequence": 1,
                                    "code": "\n44 \n45             dupe_key = hashlib.md5(\"{} | {}\".format(title, i.vuln_source)\n46                 .encode(\"utf-8\")) \\\n47                 .hexdigest()\n\n",
                                    "line": 45
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "9a49332028ee36c0d89913f7c060af3c",
                            "ruleId": "blacklist:B303",
                            "locationId": "459ac706cd9c291b50c3267ba97087ba",
                            "line": 73,
                            "code": "\n72 \n73                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n74 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/bugcrowd/parser.py</code><br /><strong>Line number:</strong> <code>73</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />72 <br />73                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()<br />74 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "459ac706cd9c291b50c3267ba97087ba",
                                    "sequence": 1,
                                    "code": "\n72 \n73                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n74 \n\n",
                                    "line": 73
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "6c8ab5594505b16f1c3c49d06d2f872b",
                            "ruleId": "blacklist:B303",
                            "locationId": "58d7a5b0fded907766518bb1225ce3c1",
                            "line": 62,
                            "code": "\n61             fingerprint = \"bundler-audit\" + gem_name + gem_version + advisory_cve + sev\n62             dupe_key = hashlib.md5(fingerprint.encode(\"utf-8\")).hexdigest()\n63             if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/bundler_audit/parser.py</code><br /><strong>Line number:</strong> <code>62</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />61             fingerprint = \"bundler-audit\" + gem_name + gem_version + advisory_cve + sev<br />62             dupe_key = hashlib.md5(fingerprint.encode(\"utf-8\")).hexdigest()<br />63             if dupe_key in dupes:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "58d7a5b0fded907766518bb1225ce3c1",
                                    "sequence": 1,
                                    "code": "\n61             fingerprint = \"bundler-audit\" + gem_name + gem_version + advisory_cve + sev\n62             dupe_key = hashlib.md5(fingerprint.encode(\"utf-8\")).hexdigest()\n63             if dupe_key in dupes:\n\n",
                                    "line": 62
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "3e9ded0c82d0fdf301141fd86b71fd12",
                            "ruleId": "blacklist:B303",
                            "locationId": "6f064b1e9831c857b9b7bf65234c45db",
                            "line": 53,
                            "code": "\n52                     vuln['image_id'] = tree['vendors'][vendor]['image_id']\n53                     unique_key = hashlib.md5(\n54                         str(vuln).encode('utf-8')).hexdigest()\n55                     item = get_item(vuln, test)\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/ccvs/parser.py</code><br /><strong>Line number:</strong> <code>53</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />52                     vuln['image_id'] = tree['vendors'][vendor]['image_id']<br />53                     unique_key = hashlib.md5(<br />54                         str(vuln).encode('utf-8')).hexdigest()<br />55                     item = get_item(vuln, test)</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "6f064b1e9831c857b9b7bf65234c45db",
                                    "sequence": 1,
                                    "code": "\n52                     vuln['image_id'] = tree['vendors'][vendor]['image_id']\n53                     unique_key = hashlib.md5(\n54                         str(vuln).encode('utf-8')).hexdigest()\n55                     item = get_item(vuln, test)\n\n",
                                    "line": 53
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "781af193b13f7ed506fd5320153449ed",
                            "ruleId": "blacklist:B303",
                            "locationId": "f756a74bbc8cf187f82bb5b3c3a0e433",
                            "line": 56,
                            "code": "\n55 \n56                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n57 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/cobalt/parser.py</code><br /><strong>Line number:</strong> <code>56</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />55 <br />56                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()<br />57 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "f756a74bbc8cf187f82bb5b3c3a0e433",
                                    "sequence": 1,
                                    "code": "\n55 \n56                 key = hashlib.md5((finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n57 \n\n",
                                    "line": 56
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "c96c37208a5e1753b13b124f5ef4ec74",
                            "ruleId": "blacklist:B303",
                            "locationId": "b8a390396c5dc2ad5b18f4e0dd80e2b0",
                            "line": 43,
                            "code": "\n42 \n43             dupe_key = hashlib.md5(category.encode('utf-8') + str(cwe).encode('utf-8') + title.encode('utf-8')).hexdigest()\n44 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/contrast/parser.py</code><br /><strong>Line number:</strong> <code>43</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />42 <br />43             dupe_key = hashlib.md5(category.encode('utf-8') + str(cwe).encode('utf-8') + title.encode('utf-8')).hexdigest()<br />44 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "b8a390396c5dc2ad5b18f4e0dd80e2b0",
                                    "sequence": 1,
                                    "code": "\n42 \n43             dupe_key = hashlib.md5(category.encode('utf-8') + str(cwe).encode('utf-8') + title.encode('utf-8')).hexdigest()\n44 \n\n",
                                    "line": 43
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "39a1e117e35b789c1ec8a1bb5ccbd429",
                            "ruleId": "hardcoded_bind_all_interfaces:B104",
                            "locationId": "b8a390396c5dc2ad5b18f4e0dd80e2b0",
                            "line": 95,
                            "code": "\n94         protocol = \"http\"\n95         host = \"0.0.0.0\"\n96         query = \"\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>hardcoded_bind_all_interfaces</code><br /><strong>Test ID:</strong> <code>B104</code><br /><strong>Filename:</strong> <code>project/tools/contrast/parser.py</code><br /><strong>Line number:</strong> <code>95</code><br /><strong>Issue Confidence:</strong> <code>MEDIUM</code><br /><strong>Code:</strong><br />```<br />94         protocol = \"http\"<br />95         host = \"0.0.0.0\"<br />96         query = \"\"</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "b8a390396c5dc2ad5b18f4e0dd80e2b0",
                                    "sequence": 1,
                                    "code": "\n94         protocol = \"http\"\n95         host = \"0.0.0.0\"\n96         query = \"\"\n\n",
                                    "line": 95
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "19b2d496466d2d9ef299f4bb31bbd538",
                            "ruleId": "blacklist:B303",
                            "locationId": "6a374dece7175ccbac6c64e86ef55435",
                            "line": 22,
                            "code": "\n21                                             finding.description)\n22             key = hashlib.md5(key_str.encode('utf-8')).hexdigest()\n23 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/dependency_check/parser.py</code><br /><strong>Line number:</strong> <code>22</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />21                                             finding.description)<br />22             key = hashlib.md5(key_str.encode('utf-8')).hexdigest()<br />23 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "6a374dece7175ccbac6c64e86ef55435",
                                    "sequence": 1,
                                    "code": "\n21                                             finding.description)\n22             key = hashlib.md5(key_str.encode('utf-8')).hexdigest()\n23 \n\n",
                                    "line": 22
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "6a8a7dd1b060953f4de411e057b155c7",
                            "ruleId": "blacklist:B303",
                            "locationId": "37802763fc43f7023e321b83ada8759e",
                            "line": 345,
                            "code": "\n344             if finding is not None:\n345                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n346 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/generic/parser.py</code><br /><strong>Line number:</strong> <code>345</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />344             if finding is not None:<br />345                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()<br />346 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "37802763fc43f7023e321b83ada8759e",
                                    "sequence": 1,
                                    "code": "\n344             if finding is not None:\n345                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n346 \n\n",
                                    "line": 345
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "7651522af23ef0747fd190116077aed9",
                            "ruleId": "blacklist:B303",
                            "locationId": "e04806d03632da2a5c207fe8728241c9",
                            "line": 57,
                            "code": "\n56 \n57                 dupe_key = hashlib.md5((issue[\"offender\"]).encode(\"utf-8\")).hexdigest()\n58 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/gitleaks/parser.py</code><br /><strong>Line number:</strong> <code>57</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />56 <br />57                 dupe_key = hashlib.md5((issue[\"offender\"]).encode(\"utf-8\")).hexdigest()<br />58 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "e04806d03632da2a5c207fe8728241c9",
                                    "sequence": 1,
                                    "code": "\n56 \n57                 dupe_key = hashlib.md5((issue[\"offender\"]).encode(\"utf-8\")).hexdigest()\n58 \n\n",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "0e85f3e86acaa9fcbf94695b7fa2c1c3",
                            "ruleId": "blacklist:B303",
                            "locationId": "70d2be227da8ced8f6aabda247890d38",
                            "line": 77,
                            "code": "\n76 \n77             dupe_key = hashlib.md5(str(references + title).encode('utf-8')).hexdigest()\n78             if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/h1/parser.py</code><br /><strong>Line number:</strong> <code>77</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />76 <br />77             dupe_key = hashlib.md5(str(references + title).encode('utf-8')).hexdigest()<br />78             if dupe_key in dupes:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "70d2be227da8ced8f6aabda247890d38",
                                    "sequence": 1,
                                    "code": "\n76 \n77             dupe_key = hashlib.md5(str(references + title).encode('utf-8')).hexdigest()\n78             if dupe_key in dupes:\n\n",
                                    "line": 77
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "1b31dd6ab4458bb896dba619f592a273",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "70d2be227da8ced8f6aabda247890d38",
                            "line": 125,
                            "code": "\n124             description += \"CVSS: {}\\n\".format(cvss)\n125         except:\n126             pass\n127 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code><br /><strong>Test ID:</strong> <code>B110</code><br /><strong>Filename:</strong> <code>project/tools/h1/parser.py</code><br /><strong>Line number:</strong> <code>125</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />124             description += \"CVSS: {}\\n\".format(cvss)<br />125         except:<br />126             pass<br />127 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "70d2be227da8ced8f6aabda247890d38",
                                    "sequence": 1,
                                    "code": "\n124             description += \"CVSS: {}\\n\".format(cvss)\n125         except:\n126             pass\n127 \n\n",
                                    "line": 125
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "cc647accc8355787f06873555792f07e",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "70d2be227da8ced8f6aabda247890d38",
                            "line": 136,
                            "code": "\n135             description += \"\\n##Weakness: {}\\n{}\".format(weakness_title, weakness_desc)\n136         except:\n137             pass\n138 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code><br /><strong>Test ID:</strong> <code>B110</code><br /><strong>Filename:</strong> <code>project/tools/h1/parser.py</code><br /><strong>Line number:</strong> <code>136</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />135             description += \"\\n##Weakness: {}\\n{}\".format(weakness_title, weakness_desc)<br />136         except:<br />137             pass<br />138 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "70d2be227da8ced8f6aabda247890d38",
                                    "sequence": 1,
                                    "code": "\n135             description += \"\\n##Weakness: {}\\n{}\".format(weakness_title, weakness_desc)\n136         except:\n137             pass\n138 \n\n",
                                    "line": 136
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "40b8de6de4481c43ec6ac89922a27abd",
                            "ruleId": "blacklist:B303",
                            "locationId": "06467e431664130b895dfe86c0ba6582",
                            "line": 55,
                            "code": "\n54                             continue\n55                         unique_key = hashlib.md5(\n56                             str(vuln).encode('utf-8')).hexdigest()\n57                         item = get_item(vuln, test)\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/huskyci/parser.py</code><br /><strong>Line number:</strong> <code>55</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />54                             continue<br />55                         unique_key = hashlib.md5(<br />56                             str(vuln).encode('utf-8')).hexdigest()<br />57                         item = get_item(vuln, test)</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "06467e431664130b895dfe86c0ba6582",
                                    "sequence": 1,
                                    "code": "\n54                             continue\n55                         unique_key = hashlib.md5(\n56                             str(vuln).encode('utf-8')).hexdigest()\n57                         item = get_item(vuln, test)\n\n",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a5a31587bf5e1b71ad1f80b65b1b69b3",
                            "ruleId": "blacklist:B303",
                            "locationId": "de0d42fe5f463f827b1eb313875d8f10",
                            "line": 89,
                            "code": "\n88                     # Now time to start assigning issues to findings and endpoints\n89                     dupe_key = hashlib.md5(str(issue_description + name + severity).encode('utf-8')).hexdigest()\n90                     # check if finding is a duplicate\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/ibm_app/parser.py</code><br /><strong>Line number:</strong> <code>89</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />88                     # Now time to start assigning issues to findings and endpoints<br />89                     dupe_key = hashlib.md5(str(issue_description + name + severity).encode('utf-8')).hexdigest()<br />90                     # check if finding is a duplicate</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "de0d42fe5f463f827b1eb313875d8f10",
                                    "sequence": 1,
                                    "code": "\n88                     # Now time to start assigning issues to findings and endpoints\n89                     dupe_key = hashlib.md5(str(issue_description + name + severity).encode('utf-8')).hexdigest()\n90                     # check if finding is a duplicate\n\n",
                                    "line": 89
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "c3352f2d4c59319b258a89812a9a9739",
                            "ruleId": "blacklist:B303",
                            "locationId": "66f335d306aa2affbff78292edb1d8a9",
                            "line": 71,
                            "code": "\n70 \n71             dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n72 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/immuniweb/parser.py</code><br /><strong>Line number:</strong> <code>71</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />70 <br />71             dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()<br />72 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "66f335d306aa2affbff78292edb1d8a9",
                                    "sequence": 1,
                                    "code": "\n70 \n71             dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n72 \n\n",
                                    "line": 71
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "50aa8ce58810f1c3066d49185416c756",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "aff67882343ec104a94fbba32b9f3924",
                            "line": 79,
                            "code": "\n78                 finding.cwe = int(row['CWE'])\n79             except:\n80                 pass\n81 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code><br /><strong>Test ID:</strong> <code>B110</code><br /><strong>Filename:</strong> <code>project/tools/kiuwan/parser.py</code><br /><strong>Line number:</strong> <code>79</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />78                 finding.cwe = int(row['CWE'])<br />79             except:<br />80                 pass<br />81 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "aff67882343ec104a94fbba32b9f3924",
                                    "sequence": 1,
                                    "code": "\n78                 finding.cwe = int(row['CWE'])\n79             except:\n80                 pass\n81 \n\n",
                                    "line": 79
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "2fcc50c0fcf85deecac231de9e9c4736",
                            "ruleId": "blacklist:B303",
                            "locationId": "aff67882343ec104a94fbba32b9f3924",
                            "line": 88,
                            "code": "\n87 \n88                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n89 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/kiuwan/parser.py</code><br /><strong>Line number:</strong> <code>88</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />87 <br />88                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()<br />89 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "aff67882343ec104a94fbba32b9f3924",
                                    "sequence": 1,
                                    "code": "\n87 \n88                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode(\"utf-8\")).hexdigest()\n89 \n\n",
                                    "line": 88
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "d8a981979c120d650a56404e0544a935",
                            "ruleId": "blacklist:B303",
                            "locationId": "fcc123836c216057853f68de4a53d600",
                            "line": 72,
                            "code": "\n71                 # make dupe hash key\n72                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n73                 # check if dupes are present.\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/microfocus_webinspect/parser.py</code><br /><strong>Line number:</strong> <code>72</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />71                 # make dupe hash key<br />72                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()<br />73                 # check if dupes are present.</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "fcc123836c216057853f68de4a53d600",
                                    "sequence": 1,
                                    "code": "\n71                 # make dupe hash key\n72                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n73                 # check if dupes are present.\n\n",
                                    "line": 72
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "eab91192d3d3d6711f9bbc3c9ac441b5",
                            "ruleId": "blacklist:B303",
                            "locationId": "f3e09bf5f95c594d059d5637fcd0c6e4",
                            "line": 55,
                            "code": "\n54 \n55                 dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n56 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/mozilla_observatory/parser.py</code><br /><strong>Line number:</strong> <code>55</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />54 <br />55                 dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()<br />56 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "f3e09bf5f95c594d059d5637fcd0c6e4",
                                    "sequence": 1,
                                    "code": "\n54 \n55                 dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n56 \n\n",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "01d6e80b131b0e1f14dbff01c89b5d21",
                            "ruleId": "blacklist:B303",
                            "locationId": "0d9301840c9c2996b6b225a8d554ca81",
                            "line": 348,
                            "code": "\n347 \n348                 key = hashlib.md5((finding.url + '|' + finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n349 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/openvas_csv/parser.py</code><br /><strong>Line number:</strong> <code>348</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />347 <br />348                 key = hashlib.md5((finding.url + '|' + finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()<br />349 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "0d9301840c9c2996b6b225a8d554ca81",
                                    "sequence": 1,
                                    "code": "\n347 \n348                 key = hashlib.md5((finding.url + '|' + finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n349 \n\n",
                                    "line": 348
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a2f6dcad53d547b328c73469fae16d73",
                            "ruleId": "blacklist:B303",
                            "locationId": "07faf7e5c433779304f00ca755178465",
                            "line": 55,
                            "code": "\n54             item = get_item(model, test)\n55             unique_key = hashlib.md5((item.title + item.references).encode()).hexdigest()\n56             items[unique_key] = item\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/ort/parser.py</code><br /><strong>Line number:</strong> <code>55</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />54             item = get_item(model, test)<br />55             unique_key = hashlib.md5((item.title + item.references).encode()).hexdigest()<br />56             items[unique_key] = item</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "07faf7e5c433779304f00ca755178465",
                                    "sequence": 1,
                                    "code": "\n54             item = get_item(model, test)\n55             unique_key = hashlib.md5((item.title + item.references).encode()).hexdigest()\n56             items[unique_key] = item\n\n",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "ee12bd64695b1dc74bd7781ed4787615",
                            "ruleId": "blacklist:B405",
                            "locationId": "448e71f236d95c86843491990f1b0ae3",
                            "line": 7,
                            "code": "\n6 import re\n7 import xml.etree.ElementTree\n8 from datetime import datetime\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B405</code><br /><strong>Filename:</strong> <code>project/tools/qualys_webapp/parser.py</code><br /><strong>Line number:</strong> <code>7</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />6 import re<br />7 import xml.etree.ElementTree<br />8 from datetime import datetime</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "448e71f236d95c86843491990f1b0ae3",
                                    "sequence": 1,
                                    "code": "\n6 import re\n7 import xml.etree.ElementTree\n8 from datetime import datetime\n\n",
                                    "line": 7
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "556786b76ba108aedf6253ef6ae43e41",
                            "ruleId": "blacklist:B314",
                            "locationId": "448e71f236d95c86843491990f1b0ae3",
                            "line": 237,
                            "code": "\n236     # supposed to be safe against XEE: https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n237     tree = xml.etree.ElementTree.parse(qualys_xml_file)\n238     is_app_report = tree.getroot().tag == 'WAS_WEBAPP_REPORT'\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B314</code><br /><strong>Filename:</strong> <code>project/tools/qualys_webapp/parser.py</code><br /><strong>Line number:</strong> <code>237</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />236     # supposed to be safe against XEE: https://docs.python.org/3/library/xml.html#xml-vulnerabilities<br />237     tree = xml.etree.ElementTree.parse(qualys_xml_file)<br />238     is_app_report = tree.getroot().tag == 'WAS_WEBAPP_REPORT'</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "448e71f236d95c86843491990f1b0ae3",
                                    "sequence": 1,
                                    "code": "\n236     # supposed to be safe against XEE: https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n237     tree = xml.etree.ElementTree.parse(qualys_xml_file)\n238     is_app_report = tree.getroot().tag == 'WAS_WEBAPP_REPORT'\n\n",
                                    "line": 237
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "dfa0b17ba8e4912426291699b6659e88",
                            "ruleId": "blacklist:B303",
                            "locationId": "711cf7dd2915eed3374c8185c9530a24",
                            "line": 35,
                            "code": "\n34                         encrypted_file = node['file']\n35                         unique_key = hashlib.md5((item.title + item.references + encrypted_file).encode()).hexdigest()\n36                         items[unique_key] = item\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/retirejs/parser.py</code><br /><strong>Line number:</strong> <code>35</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />34                         encrypted_file = node['file']<br />35                         unique_key = hashlib.md5((item.title + item.references + encrypted_file).encode()).hexdigest()<br />36                         items[unique_key] = item</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "711cf7dd2915eed3374c8185c9530a24",
                                    "sequence": 1,
                                    "code": "\n34                         encrypted_file = node['file']\n35                         unique_key = hashlib.md5((item.title + item.references + encrypted_file).encode()).hexdigest()\n36                         items[unique_key] = item\n\n",
                                    "line": 35
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "913c43843f12fd18d9ba406f8857e767",
                            "ruleId": "blacklist:B310",
                            "locationId": "b7c95fa1ddc8dc2f6b458646fdb163bc",
                            "line": 25,
                            "code": "\n24         try:\n25             response = urllib.request.urlopen(url)\n26             return json.load(response)\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B310</code><br /><strong>Filename:</strong> <code>project/tools/safety/parser.py</code><br /><strong>Line number:</strong> <code>25</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />24         try:<br />25             response = urllib.request.urlopen(url)<br />26             return json.load(response)</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "b7c95fa1ddc8dc2f6b458646fdb163bc",
                                    "sequence": 1,
                                    "code": "\n24         try:\n25             response = urllib.request.urlopen(url)\n26             return json.load(response)\n\n",
                                    "line": 25
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "46535067782930793785bd931e947b40",
                            "ruleId": "blacklist:B303",
                            "locationId": "310ef0d0d2b1b746d8b02cd0fac13ace",
                            "line": 85,
                            "code": "\n84             if item:\n85                 hash_key = hashlib.md5(\n86                     node.get('Public ID').encode('utf-8') + node.get('Library').encode('utf-8')).hexdigest()\n87 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/scantist/parser.py</code><br /><strong>Line number:</strong> <code>85</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />84             if item:<br />85                 hash_key = hashlib.md5(<br />86                     node.get('Public ID').encode('utf-8') + node.get('Library').encode('utf-8')).hexdigest()<br />87 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "310ef0d0d2b1b746d8b02cd0fac13ace",
                                    "sequence": 1,
                                    "code": "\n84             if item:\n85                 hash_key = hashlib.md5(\n86                     node.get('Public ID').encode('utf-8') + node.get('Library').encode('utf-8')).hexdigest()\n87 \n\n",
                                    "line": 85
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "18efa7ca4c6af8b712ea571c6744d504",
                            "ruleId": "blacklist:B410",
                            "locationId": "7e25837084d8f9ed1546c889b2fcfe68",
                            "line": 5,
                            "code": "\n4 from django.utils.html import strip_tags\n5 from lxml import etree\n6 \n7 from data.models import Finding\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B410</code><br /><strong>Filename:</strong> <code>project/tools/sonarqube/parser.py</code><br /><strong>Line number:</strong> <code>5</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />4 from django.utils.html import strip_tags<br />5 from lxml import etree<br />6 <br />7 from data.models import Finding</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "7e25837084d8f9ed1546c889b2fcfe68",
                                    "sequence": 1,
                                    "code": "\n4 from django.utils.html import strip_tags\n5 from lxml import etree\n6 \n7 from data.models import Finding\n\n",
                                    "line": 5
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "f94292c4e79c1ad65d1cd4807d6acd41",
                            "ruleId": "blacklist:B320",
                            "locationId": "7e25837084d8f9ed1546c889b2fcfe68",
                            "line": 33,
                            "code": "\n32         parser = etree.HTMLParser()\n33         tree = etree.parse(filename, parser)\n34         if self.mode not in [None, 'detailed']:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B320</code><br /><strong>Filename:</strong> <code>project/tools/sonarqube/parser.py</code><br /><strong>Line number:</strong> <code>33</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />32         parser = etree.HTMLParser()<br />33         tree = etree.parse(filename, parser)<br />34         if self.mode not in [None, 'detailed']:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "7e25837084d8f9ed1546c889b2fcfe68",
                                    "sequence": 1,
                                    "code": "\n32         parser = etree.HTMLParser()\n33         tree = etree.parse(filename, parser)\n34         if self.mode not in [None, 'detailed']:\n\n",
                                    "line": 33
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "1873b335bb8efeaf87a2fb7fa637748c",
                            "ruleId": "blacklist:B410",
                            "locationId": "75214d5e4cc7f7e9223dbb11951e3055",
                            "line": 5,
                            "code": "\n4 import html2text\n5 from lxml import etree\n6 \n7 from data.models import Finding, Sonarqube_Issue\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B410</code><br /><strong>Filename:</strong> <code>project/tools/sonarqube_api/importer.py</code><br /><strong>Line number:</strong> <code>5</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />4 import html2text<br />5 from lxml import etree<br />6 <br />7 from data.models import Finding, Sonarqube_Issue</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "75214d5e4cc7f7e9223dbb11951e3055",
                                    "sequence": 1,
                                    "code": "\n4 import html2text\n5 from lxml import etree\n6 \n7 from data.models import Finding, Sonarqube_Issue\n\n",
                                    "line": 5
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "40d1aabcd82a24f413165ad32d2bcb58",
                            "ruleId": "blacklist:B320",
                            "locationId": "75214d5e4cc7f7e9223dbb11951e3055",
                            "line": 162,
                            "code": "\n161         parser = etree.HTMLParser()\n162         details = etree.fromstring(vuln_details, parser)\n163         rule_references = \"\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B320</code><br /><strong>Filename:</strong> <code>project/tools/sonarqube_api/importer.py</code><br /><strong>Line number:</strong> <code>162</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />161         parser = etree.HTMLParser()<br />162         details = etree.fromstring(vuln_details, parser)<br />163         rule_references = \"\"</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "75214d5e4cc7f7e9223dbb11951e3055",
                                    "sequence": 1,
                                    "code": "\n161         parser = etree.HTMLParser()\n162         details = etree.fromstring(vuln_details, parser)\n163         rule_references = \"\"\n\n",
                                    "line": 162
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "c3d05625696a0daa19cfa2caf919443e",
                            "ruleId": "blacklist:B303",
                            "locationId": "0d7fd46316f8a760481959f6e7d5922c",
                            "line": 124,
                            "code": "\n123                 if title and description is not None:\n124                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n125                     if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/sslyze/parser_xml.py</code><br /><strong>Line number:</strong> <code>124</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />123                 if title and description is not None:<br />124                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()<br />125                     if dupe_key in dupes:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "0d7fd46316f8a760481959f6e7d5922c",
                                    "sequence": 1,
                                    "code": "\n123                 if title and description is not None:\n124                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n125                     if dupe_key in dupes:\n\n",
                                    "line": 124
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "647ccc45168a5ba1673c314019b6c700",
                            "ruleId": "blacklist:B303",
                            "locationId": "7e5ba448e3daa82efa37fca08b8843d9",
                            "line": 61,
                            "code": "\n60                 if title and description is not None:\n61                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n62                     if dupe_key in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/testssl/parser.py</code><br /><strong>Line number:</strong> <code>61</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />60                 if title and description is not None:<br />61                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()<br />62                     if dupe_key in dupes:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "7e5ba448e3daa82efa37fca08b8843d9",
                                    "sequence": 1,
                                    "code": "\n60                 if title and description is not None:\n61                     dupe_key = hashlib.md5(str(description + title).encode('utf-8')).hexdigest()\n62                     if dupe_key in dupes:\n\n",
                                    "line": 61
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "aa66a62e9ed62c265ac77fca27a0e9e5",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "7e5ba448e3daa82efa37fca08b8843d9",
                            "line": 103,
                            "code": "\n102             host = rhost.group(4)\n103         except:\n104             pass\n105         try:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code><br /><strong>Test ID:</strong> <code>B110</code><br /><strong>Filename:</strong> <code>project/tools/testssl/parser.py</code><br /><strong>Line number:</strong> <code>103</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />102             host = rhost.group(4)<br />103         except:<br />104             pass<br />105         try:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "7e5ba448e3daa82efa37fca08b8843d9",
                                    "sequence": 1,
                                    "code": "\n102             host = rhost.group(4)\n103         except:\n104             pass\n105         try:\n\n",
                                    "line": 103
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "b7f0d8a1a8d18d12cf3eb14ffd28f497",
                            "ruleId": "blacklist:B303",
                            "locationId": "6e570cd1615066b07e78691a85d99a15",
                            "line": 54,
                            "code": "\n53 \n54             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n55             description += \"\\n**Strings Found:**\\n\\`\\`\\`\" + strings_found + \"\\`\\`\\`\\n\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/trufflehog/parser.py</code><br /><strong>Line number:</strong> <code>54</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br /><code>``53 54             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()55             description += \"\\n**Strings Found:**\\n\\</code>``\" + strings_found + \"```\\n\"</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "6e570cd1615066b07e78691a85d99a15",
                                    "sequence": 1,
                                    "code": "\n53 \n54             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n55             description += \"\\n**Strings Found:**\\n\\`\\`\\`\" + strings_found + \"\\`\\`\\`\\n\"\n\n",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "f8f88228e7a21e361d61754c6927a86c",
                            "ruleId": "blacklist:B303",
                            "locationId": "f2ae9eb8d9911f5b26fd966695546cca",
                            "line": 50,
                            "code": "\n49 \n50             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n51             description += \"\\n**Strings Found:**\\n\\`\\`\\`\\n\" + strings_found + \"\\n\\`\\`\\`\\n\"\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/trufflehog3/parser.py</code><br /><strong>Line number:</strong> <code>50</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br /><code>``49 50             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()51             description += \"\\n**Strings Found:**\\n\\</code>``\\n\" + strings_found + \"\\n```\\n\"</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "f2ae9eb8d9911f5b26fd966695546cca",
                                    "sequence": 1,
                                    "code": "\n49 \n50             dupe_key = hashlib.md5((file + reason).encode(\"utf-8\")).hexdigest()\n51             description += \"\\n**Strings Found:**\\n\\`\\`\\`\\n\" + strings_found + \"\\n\\`\\`\\`\\n\"\n\n",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "2adacc27d6196e091caaa5b18f02a85b",
                            "ruleId": "blacklist:B303",
                            "locationId": "79ee1c4232266bb74ffb75345e7198cd",
                            "line": 71,
                            "code": "\n70             if finding is not None:\n71                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n72                 if key not in dupes:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/twistlock/parser.py</code><br /><strong>Line number:</strong> <code>71</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />70             if finding is not None:<br />71                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()<br />72                 if key not in dupes:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "79ee1c4232266bb74ffb75345e7198cd",
                                    "sequence": 1,
                                    "code": "\n70             if finding is not None:\n71                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n72                 if key not in dupes:\n\n",
                                    "line": 71
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "5ad7c73aa725d5c054b5a53d6b70e4d8",
                            "ruleId": "blacklist:B303",
                            "locationId": "9ee847f7e95ac48679c0a423d9bd9918",
                            "line": 114,
                            "code": "\n113             if finding is not None:\n114                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n115 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/vcg/parser.py</code><br /><strong>Line number:</strong> <code>114</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />113             if finding is not None:<br />114                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()<br />115 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "9ee847f7e95ac48679c0a423d9bd9918",
                                    "sequence": 1,
                                    "code": "\n113             if finding is not None:\n114                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n115 \n\n",
                                    "line": 114
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "6f7e121871a93f8ca6e9d2ad69e31fea",
                            "ruleId": "blacklist:B303",
                            "locationId": "9ee847f7e95ac48679c0a423d9bd9918",
                            "line": 174,
                            "code": "\n173             if finding is not None:\n174                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n175 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/vcg/parser.py</code><br /><strong>Line number:</strong> <code>174</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />173             if finding is not None:<br />174                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()<br />175 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "9ee847f7e95ac48679c0a423d9bd9918",
                                    "sequence": 1,
                                    "code": "\n173             if finding is not None:\n174                 key = hashlib.md5((finding.severity + '|' + finding.title + '|' + finding.description).encode('utf-8')).hexdigest()\n175 \n\n",
                                    "line": 174
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "a8c715ebc59ab2f2946cfafabb20a344",
                            "ruleId": "blacklist:B303",
                            "locationId": "5f9fc123b06283563362a7a1329f5897",
                            "line": 75,
                            "code": "\n74                 # make dupe hash key\n75                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n76                 # check if dupes are present.\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/wapiti/parser.py</code><br /><strong>Line number:</strong> <code>75</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />74                 # make dupe hash key<br />75                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()<br />76                 # check if dupes are present.</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "5f9fc123b06283563362a7a1329f5897",
                                    "sequence": 1,
                                    "code": "\n74                 # make dupe hash key\n75                 dupe_key = hashlib.md5(str(description + title + severity).encode('utf-8')).hexdigest()\n76                 # check if dupes are present.\n\n",
                                    "line": 75
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "33732d5be9b05bd9d745b06869830d37",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "5f9fc123b06283563362a7a1329f5897",
                            "line": 124,
                            "code": "\n123             host = rhost[4]\n124         except:\n125             pass\n126         try:\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code><br /><strong>Test ID:</strong> <code>B110</code><br /><strong>Filename:</strong> <code>project/tools/wapiti/parser.py</code><br /><strong>Line number:</strong> <code>124</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />123             host = rhost[4]<br />124         except:<br />125             pass<br />126         try:</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "5f9fc123b06283563362a7a1329f5897",
                                    "sequence": 1,
                                    "code": "\n123             host = rhost[4]\n124         except:\n125             pass\n126         try:\n\n",
                                    "line": 124
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "7c9722bf887756e3422222ff77823613",
                            "ruleId": "blacklist:B303",
                            "locationId": "bb448050a7950c382d44436d36c02d6a",
                            "line": 104,
                            "code": "\n103         def _dedup_and_create_finding(dupes, vuln):\n104             dupe_key = hashlib.md5(vuln.get('description').encode('utf-8') + vuln.get('title').encode('utf-8')).hexdigest()\n105 \n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>blacklist</code><br /><strong>Test ID:</strong> <code>B303</code><br /><strong>Filename:</strong> <code>project/tools/mend/parser.py</code><br /><strong>Line number:</strong> <code>104</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />103         def _dedup_and_create_finding(dupes, vuln):<br />104             dupe_key = hashlib.md5(vuln.get('description').encode('utf-8') + vuln.get('title').encode('utf-8')).hexdigest()<br />105 </p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "bb448050a7950c382d44436d36c02d6a",
                                    "sequence": 1,
                                    "code": "\n103         def _dedup_and_create_finding(dupes, vuln):\n104             dupe_key = hashlib.md5(vuln.get('description').encode('utf-8') + vuln.get('title').encode('utf-8')).hexdigest()\n105 \n\n",
                                    "line": 104
                                }
                            ]
                        },
                        {
                            "type": "sast",
                            "id": "49a513c1249de8fe9d91ecca7aa350aa",
                            "ruleId": "try_except_pass:B110",
                            "locationId": "992591c24bda4ba3d78dc21411de19b9",
                            "line": 162,
                            "code": "\n161             return socket.gethostbyname(host)\n162         except:\n163             pass\n164         return host\n\n",
                            "status": "To Verify",
                            "description": "<p><strong>Test Name:</strong> <code>try_except_pass</code><br /><strong>Test ID:</strong> <code>B110</code><br /><strong>Filename:</strong> <code>project/tools/zap/parser.py</code><br /><strong>Line number:</strong> <code>162</code><br /><strong>Issue Confidence:</strong> <code>HIGH</code><br /><strong>Code:</strong><br />```<br />161             return socket.gethostbyname(host)<br />162         except:<br />163             pass<br />164         return host</p><p>```</p>",
                            "stacks": [
                                {
                                    "locationId": "992591c24bda4ba3d78dc21411de19b9",
                                    "sequence": 1,
                                    "code": "\n161             return socket.gethostbyname(host)\n162         except:\n163             pass\n164         return host\n\n",
                                    "line": 162
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "$schema": "https://docs.appsec-hub.ru/"
}